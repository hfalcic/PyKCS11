/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.22
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#ifdef _DEBUG
  #undef _DEBUG
  #include "Python.h"
  #define _DEBUG
#else
  #include "Python.h"
#endif

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypePrettyName  SWIG_Python_TypePrettyName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(const char *)     SWIG_TypePrettyName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *swig_type_list_handle;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *swig_type_list_handle;
  *swig_type_list_handle = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Return the pretty name associated with this type,
   that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME(const char *)
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Compare two type names skipping the space characters, therefore
   "char*" == "char *" and "Class<int>" == "Class<int >", etc.

   Return 0 when the two name types are equivalent, as in
   strncmp, but skipping ' '.
*/
static int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
static int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}
  

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = *swig_type_list_handle;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = *swig_type_list_handle;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 
/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

typedef double (*py_objasdbl_conv)(PyObject *obj);

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);


#else


/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,                                  /* Number of items in variable part (ob_size) */
  (char *)"swigvarlink",              /* Type name (tp_name) */
  sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
  0,                                  /* Itemsize (tp_itemsize) */
  0,                                  /* Deallocator (tp_dealloc) */ 
  (printfunc) swig_varlink_print,     /* Print (tp_print) */
  (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
  (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
  0,                                  /* tp_compare */
  (reprfunc) swig_varlink_repr,       /* tp_repr */
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_sequence */
  0,                                  /* tp_as_mapping */
  0,                                  /* tp_hash */
  0,                                  /* tp_call */
  0,                                  /* tp_str */
  0,                                  /* tp_getattro */
  0,                                  /* tp_setattro */
  0,                                  /* tp_as_buffer */
  0,                                  /* tp_flags */
  0,                                  /* tp_doc */
  0,                                  /* tp_traverse */
  0,                                  /* tp_clear */
  0,                                  /* tp_richcompare */
  0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
  0,                                  /* tp_iter */
  0,                                  /* tp_iternext */
  0,                                  /* tp_methods */
  0,                                  /* tp_members */
  0,                                  /* tp_getset */
  0,                                  /* tp_base */
  0,                                  /* tp_dict */
  0,                                  /* tp_descr_get */
  0,                                  /* tp_descr_set */
  0,                                  /* tp_dictoffset */
  0,                                  /* tp_init */
  0,                                  /* tp_alloc */
  0,                                  /* tp_new */
  0,                                  /* tp_free */
  0,                                  /* tp_is_gc */
  0,                                  /* tp_bases */
  0,                                  /* tp_mro */
  0,                                  /* tp_cache */
  0,                                  /* tp_subclasses */
  0,                                  /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030200
  0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
  /* these must be last */
  0,                                  /* tp_alloc */
  0,                                  /* tp_free */
  0,                                  /* tp_maxalloc */
  0,                                  /*  tp_next */
#endif
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty && c) {
      PyErr_Format(PyExc_TypeError, 
		   "Type error. Got %s, expected %s",
		   c, ty->name);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  SWIG_Python_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty && c) {
      PyErr_Format(PyExc_TypeError, 
		   "Type error. Got %s, expected %s",
		   c, ty->name);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_Python_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      if (constants[i].pvalue) {
	obj = PyString_FromString((char *) constants[i].pvalue);
      } else {
	Py_INCREF(Py_None);
	obj = Py_None;
      }
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_vectorTunsigned_char_t swig_types[0] 
#define  SWIGTYPE_p_unsigned_char swig_types[1] 
#define  SWIGTYPE_p_CK_MECHANISM swig_types[2] 
#define  SWIGTYPE_p_CK_MECHANISM_INFO swig_types[3] 
#define  SWIGTYPE_p_CK_VERSION swig_types[4] 
#define  SWIGTYPE_p_CK_SESSION_INFO swig_types[5] 
#define  SWIGTYPE_p_CK_TOKEN_INFO swig_types[6] 
#define  SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t swig_types[7] 
#define  SWIGTYPE_p_CK_SESSION_HANDLE swig_types[8] 
#define  SWIGTYPE_p_unsigned_long swig_types[9] 
#define  SWIGTYPE_p_CK_ATTRIBUTE_SMART swig_types[10] 
#define  SWIGTYPE_p_vectorTint_t swig_types[11] 
#define  SWIGTYPE_p_CPKCS11Lib swig_types[12] 
#define  SWIGTYPE_p_void swig_types[13] 
#define  SWIGTYPE_p_char swig_types[14] 
#define  SWIGTYPE_p_CK_INFO swig_types[15] 
#define  SWIGTYPE_p_CK_DATE swig_types[16] 
#define  SWIGTYPE_p_CK_SLOT_INFO swig_types[17] 
static swig_type_info *swig_types[19];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _PyKCS11.so
  ------------------------------------------------*/
#define SWIG_init    init_PyKCS11

#define SWIG_name    "_PyKCS11"

/* Auxiliar swig  macros that appear in the header */

#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
#define SWIGSTATICINLINE(a) static inline a
#define SWIGSTATIC(a) static a
#define swig_new_array(size,Type) (new Type[(size)])
#define swig_delete(cptr) delete cptr
#define swig_delete_array(cptr) delete[] cptr
#define swig_const_cast(a,Type) const_cast<Type >(a)
#define swig_static_cast(a,Type) static_cast<Type >(a)
#define swig_reinterpret_cast(a,Type) reinterpret_cast<Type >(a)
#define swig_new_copy(ptr,Type) (new Type(*ptr))
#define swig_numeric_cast(a,Type) static_cast<Type >(a)

#else /* C case */

#define SWIGSTATICINLINE(a) static a
#define SWIGSTATIC(a) static a
#define swig_new_array(size,Type) ((Type*) malloc((size)*sizeof(Type)))
#define swig_delete(cptr) free((char*)cptr)
#define swig_delete_array(cptr) free((char*)cptr)
#define swig_const_cast(a,Type) (Type)(a)
#define swig_static_cast(a,Type) (Type)(a)
#define swig_reinterpret_cast(a,Type) (Type)(a)
#define swig_numeric_cast(a,Type) (Type)(a)
#define swig_new_copy(ptr,Type)  ((Type*)memcpy(malloc(sizeof(Type)),ptr,sizeof(Type)))

#endif /* __cplusplus */


/*@c:\\Programmi\\SWIG-1.3\\Lib\\python\\pymacros.swg,63,SWIG_define@*/
#define SWIG_From_signed_SS_char PyInt_FromLong
/*@@*/
/*@c:\\Programmi\\SWIG-1.3\\Lib\\python\\pymacros.swg,63,SWIG_define@*/
#define SWIG_From_unsigned_SS_char PyInt_FromLong
/*@@*/
/*@c:\\Programmi\\SWIG-1.3\\Lib\\python\\pymacros.swg,63,SWIG_define@*/
#define SWIG_From_short PyInt_FromLong
/*@@*/
/*@c:\\Programmi\\SWIG-1.3\\Lib\\python\\pymacros.swg,63,SWIG_define@*/
#define SWIG_From_unsigned_SS_short PyInt_FromLong
/*@@*/
/*@c:\\Programmi\\SWIG-1.3\\Lib\\python\\pymacros.swg,63,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/
/*@c:\\Programmi\\SWIG-1.3\\Lib\\python\\pymacros.swg,63,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/
/*@c:\\Programmi\\SWIG-1.3\\Lib\\python\\pymacros.swg,63,SWIG_define@*/
#define SWIG_From_float PyFloat_FromDouble
/*@@*/
/*@c:\\Programmi\\SWIG-1.3\\Lib\\python\\pymacros.swg,63,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/



#include <stdlib.h>
#include <memory.h>
#include <string.h>
#include "rsaref/cryptoki.h"

#ifdef WIN32
#pragma warning(disable: 4800 4244)
#endif

#include <vector>
#include "pykcs11string.h"
#include "ck_attribute_smart.h"
#include "pkcs11lib.h"

using namespace std;



	using namespace std;


typedef struct SWIGCDATA {
    char *data;
    int   len;
} SWIGCDATA;



static SWIGCDATA cdata_void(void *ptr, int nelements) {



   SWIGCDATA d;
   d.data = (char *) ptr;



   d.len  = nelements;

   return d;
}


#include <limits.h>


SWIGSTATICINLINE(int)
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGSTATICINLINE(int)
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "a long is expected");
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGSTATICINLINE(int)
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : 0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = swig_numeric_cast(v, int);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "an int is expected");
  }
  return 0;    
}
#else
SWIGSTATICINLINE(int)
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGSTATICINLINE(int)
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGSTATIC(int)
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    PyErr_SetString(PyExc_TypeError, "a string is expected");
  }
  return 0;
}


  
#if defined(__SUNPRO_CC) 
#define SWIG_STD_NOASSIGN_STL
#endif



#include <string>
#include <stdexcept>


#if PY_VERSION_HEX < 0x02000000
#define PySequence_Size PySequence_Length
#endif
#include <stdexcept>


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void SWIG_exception_(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { SWIG_exception_(a,b); SWIG_fail; }


#include <stdexcept>


#include <algorithm>


#include <vector>


namespace swigpy {  
  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<Type>::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swigpy::type_name<Type>());
      return name.c_str();
    }
  };

  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = (SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0) != -1) 
	? SWIG_OLDOBJ : 0;
      if (res) {
	if (val) {
	  *val = p;
	}
      } else {
	PyErr_Format(PyExc_TypeError, "a '%s *' is expected",
		     type_name<Type>());
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };
  
  template <class Type> 
  struct traits_asval {
    static bool asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (res && p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (res == SWIG_NEWOBJ) delete p;
	  return true;
	} else {
	  return false;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static bool asval(PyObject *obj, Type **val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (res) {
	  typedef typename noconst_traits<Type*>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = p;
	  return true;
	} else {
	  return false;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline bool asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type, class Category> 
  struct traits_as { };

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      if (!obj || !asval(obj, &v)) {
	std::string msg = "a value of type '";
	msg += swigpy::type_name<Type>();
	msg += "' is expected";
	if (!PyErr_Occurred()) {
	  PyErr_SetString(PyExc_TypeError, msg.c_str());
	}
	if (throw_error) throw std::invalid_argument(msg);
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : 0) && v;
      if (res) {
	if (res == SWIG_NEWOBJ) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	std::string msg = "a value of type '";
	msg += swigpy::type_name<Type>();
	msg += "' is expected";
	if (!PyErr_Occurred()) {
	  PyErr_SetString(PyExc_TypeError, msg.c_str());
	}
	if (throw_error) throw std::invalid_argument(msg);
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : 0);
      if (res) {
	return v;
      } else {
	std::string msg = "a value of type '";
	msg += swigpy::type_name<Type>();
	msg += "*' is expected";
	if (!PyErr_Occurred()) {
	  PyErr_SetString(PyExc_TypeError, msg.c_str());
	}
	if (throw_error) throw std::invalid_argument(msg);
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type, class Category> 
  struct traits_check { };

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      return obj && asval(obj, (Type *)(0));
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      return obj && asptr(obj, (Type **)(0));
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swigpy {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int(obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int(val);
    }
  };
}


  namespace swigpy {
    struct PyObject_var {
      PyObject* ptr;
      PyObject_var(PyObject* obj = 0) : ptr(obj) { }      
      ~PyObject_var() { if (ptr) Py_DECREF(ptr); }      
      operator PyObject*() { return ptr; }
    };
  }


namespace swigpy {
  inline size_t
  check_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) 
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    }
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      return ((size_t) (-i) <= size) ? (size_t) (i + size) : 0;
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) 
	: (size ? (size_t)(size - 1) : 0);
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator 
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin(); 
    std::advance(pos, swigpy::check_index(i, self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator 
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin(); 
    std::advance(pos, swigpy::check_index(i, self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) { 
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swigpy::slice_index(i, size);
    typename Sequence::size_type jj = swigpy::slice_index(j, size);
    if (jj > ii) {
      return new Sequence(cgetpos(self, ii), cgetpos(self, jj));
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swigpy::slice_index(i, size);
    typename Sequence::size_type jj = swigpy::slice_index(j, size);
    if (jj < ii) jj = ii;
    typename InputSeq::const_iterator vmid = cgetpos(&v, jj - ii);
    self->insert(std::copy(v.begin(), vmid, getpos(self,ii)), vmid, v.end());
  }
 
  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swigpy::slice_index(i, size);
    typename Sequence::size_type jj = swigpy::slice_index(j, size);
    if (jj > ii) {
      self->erase(getpos(self,ii), getpos(self,jj));
    }
  }
}


#include <iterator>
namespace swigpy
{
  template <class T> 
  struct PySequence_Ref
  {
    PySequence_Ref(PyObject* seq, int index) 
      : _seq(seq), _index(index)
    {
    }

    operator T () const 
    {
      swigpy::PyObject_var item = PySequence_GetItem(_seq, _index);
      try {
	return swigpy::as<T>(item, true);
      } catch (std::exception& e) {
	PyErr_Format(PyExc_TypeError, 
		     "error in sequence element %d: %s", _index, e.what());
	throw;
      }
    }
    
    PySequence_Ref& operator=(const T& v) 
    {
      PySequence_SetItem(_seq, _index, swigpy::from<T>(v));
      return *this;
    }
    
  private:
    PyObject* _seq;
    int _index;
  };

  template <class T> 
  struct PySequence_ArrowProxy 
  {
    PySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };    

  template <class T, class Reference > 
  struct PySequence_Iter
  {
    typedef PySequence_Iter<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    PySequence_Iter()
    {
    }

    PySequence_Iter(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    { 
      return reference(_seq, _index);
    }

    PySequence_ArrowProxy<T>
    operator->() const {
      return PySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const 
    { 
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const 
    {
      return !(operator==(ri));
    }    

    self& operator ++ ()
    {
      ++_index;      
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n) 
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n) 
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }    

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    reference 
    operator[](difference_type n) const 
    { 
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    int _index;
  }; 

  template <class T> 
  struct PySequence_Cont
  {
    typedef PySequence_Ref<T> reference;
    typedef const PySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef PySequence_Iter<T, reference> iterator;
    typedef PySequence_Iter<T, const_reference> const_iterator;

    PySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~PySequence_Cont() 
    {
      if (_seq) Py_DECREF(_seq);
    }

    size_type size() const
    {
      return PySequence_Size(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }    

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }
    
    iterator end()
    {
      return iterator(_seq, size());
    }
    
    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }    

    reference operator[](difference_type n) 
    { 
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    { 
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swigpy::PyObject_var item = PySequence_GetItem(_seq, i);
	if (!swigpy::check<value_type>(item)) {
	  if (set_err) {
	    PyErr_Format(PyExc_TypeError, 
			 "element %d is not of type '%s' as expected",
			 i, swigpy::type_name<value_type>());
	  }
	  return 0;
	}
      }
      return 1;  
    }

  private:
    PyObject* _seq;
  };

}


  namespace swigpy {
    template <class PySeq, class Seq> 
    inline void
    assign(const PySeq& pyseq, Seq* seq) {
#ifdef SWIG_STD_NOASSIGN_STL
      typedef typename PySeq::value_type value_type;
      typename PySeq::const_iterator it = pyseq.begin();
      for (;it != pyseq.end(); ++it) {
	seq->insert(seq->end(),(value_type)(*it));
      }
#else
      seq->assign(pyseq.begin(), pyseq.end());
#endif
    }

    template <class Seq, class T = typename Seq::value_type >
    struct traits_asptr_stdseq {
      typedef Seq sequence;
      typedef T value_type;
		    
      static int asptr(PyObject *obj, sequence **seq) {
	if (PySequence_Check(obj)) {
	  try {
	    PySequence_Cont<value_type> pyseq(obj);
	    if (seq) {
	      sequence *pseq = new sequence();
	      assign(pyseq, pseq);
	      *seq = pseq;
	      return SWIG_NEWOBJ;
	    } else {
	      return pyseq.check();
	    }
	  } catch (std::exception& e) {
	    if (seq) {
	      if (!PyErr_Occurred())
		PyErr_SetString(PyExc_TypeError, e.what());
	    }
	    return 0;
	  }
	} else {
	  sequence *p;
	  if (SWIG_ConvertPtr(obj,(void**)&p,
			      swigpy::type_info<sequence>(),0) != -1) {
	    if (seq) *seq = p;
	    return 1;
	  }
	}
	if (seq) {
	  PyErr_Format(PyExc_TypeError, "a %s is expected", 
		       swigpy::type_name<sequence>());
	}
	return 0;	  
      }
    };

    template <class Seq, class T = typename Seq::value_type >
    struct traits_from_stdseq {
      typedef Seq sequence;
      typedef T value_type;
      typedef typename Seq::size_type size_type;
      typedef typename sequence::const_iterator const_iterator;

      static PyObject *from(const sequence& seq) {
	size_type size = seq.size();
	if (size <= (size_type)INT_MAX) {
	  PyObject *obj = PyTuple_New((int)size);
	  int i = 0;
	  for (const_iterator it = seq.begin();
	       it != seq.end(); ++it, ++i) {
	    PyTuple_SetItem(obj,i,swigpy::from<value_type>(*it));
	  }
	  return obj;
	} else {
	  PyErr_SetString(PyExc_OverflowError,
			  "sequence size not valid in python");
	  Py_INCREF(Py_None);
	  return Py_None;
	}
      }
    };
  }


  namespace swigpy {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swigpy {
	template <>  struct traits<std::vector<int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" " >";
	  }
	};
      }
    

SWIGSTATICINLINE(PyObject*)
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


SWIGSTATICINLINE(PyObject* )
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong(swig_numeric_cast(value,long)); 
}


SWIGSTATICINLINE(int)
  SWIG_AsVal_unsigned_SS_long(PyObject * obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AS_LONG(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (val) {
    PyErr_SetString(PyExc_TypeError, "an unsigned long is expected");
  }
  return 0;
}


SWIGSTATICINLINE(unsigned long)
SWIG_As_unsigned_SS_long(PyObject* obj)
{
  unsigned long v;
  if (!SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(unsigned long));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_unsigned_SS_long(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_long(obj, (unsigned long*)0);
}

bool vector_Sl_int_Sg____nonzero__(vector<int > const *self){
      return !(self->empty());
    }
vector<int >::size_type vector_Sl_int_Sg____len__(vector<int > const *self){
      return self->size();
    }
vector<int >::value_type vector_Sl_int_Sg__pop(vector<int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int >::value_type x = self->back();
      self->pop_back();
      return x;
    }

SWIGSTATICINLINE(long)
SWIG_As_long(PyObject* obj)
{
  long v;
  if (!SWIG_AsVal_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(long));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_long(PyObject* obj)
{
  return SWIG_AsVal_long(obj, (long*)0);
}

std::vector<int > *vector_Sl_int_Sg____getslice__(vector<int > *self,vector<int >::difference_type i,vector<int >::difference_type j){
      return swigpy::getslice(self, i, j);
    }
void vector_Sl_int_Sg____setslice__(vector<int > *self,vector<int >::difference_type i,vector<int >::difference_type j,std::vector<int > const &v){
      swigpy::setslice(self, i, j, v);
    }
void vector_Sl_int_Sg____delslice__(vector<int > *self,vector<int >::difference_type i,vector<int >::difference_type j){
      swigpy::delslice(self, i, j);
    }
void vector_Sl_int_Sg____delitem__(vector<int > *self,vector<int >::difference_type i){
      self->erase(swigpy::getpos(self,i));
    }
vector<int >::value_type const &vector_Sl_int_Sg____getitem__(vector<int > const *self,vector<int >::difference_type i){
      return *(swigpy::cgetpos(self, i));
    }
void vector_Sl_int_Sg____setitem__(vector<int > *self,vector<int >::difference_type i,vector<int >::value_type const &x){
      *(swigpy::getpos(self,i)) = x;
    }
void vector_Sl_int_Sg__append(vector<int > *self,vector<int >::value_type const &x){
      self->push_back(x);
    }

SWIGSTATICINLINE(int)
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' minimum %ld",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


SWIGSTATICINLINE(int)
  SWIG_AsVal_unsigned_SS_char(PyObject *obj, unsigned char *val)
{ 
  const char* errmsg = val ? "unsigned char" : 0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, UCHAR_MAX,errmsg)) {
      if (val) *val = swig_numeric_cast(v, unsigned char);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "an unsigned char is expected");
  }
  return 0;
}


namespace swigpy {
  template <> struct traits<unsigned char > {
    typedef value_category category;
    static const char* type_name() { return"unsigned char"; }
  };  
  template <>  struct traits_asval<unsigned char > {   
    typedef unsigned char value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_unsigned_SS_char(obj, val);
    }
  };
  template <>  struct traits_from<unsigned char > {
    typedef unsigned char value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_char(val);
    }
  };
}


      namespace swigpy {
	template <>  struct traits<std::vector<unsigned char > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "unsigned char" " >";
	  }
	};
      }
    

SWIGSTATICINLINE(unsigned char)
SWIG_As_unsigned_SS_char(PyObject* obj)
{
  unsigned char v;
  if (!SWIG_AsVal_unsigned_SS_char(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(unsigned char));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_unsigned_SS_char(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_char(obj, (unsigned char*)0);
}

bool vector_Sl_unsigned_SS_char_Sg____nonzero__(vector<unsigned char > const *self){
      return !(self->empty());
    }
vector<unsigned char >::size_type vector_Sl_unsigned_SS_char_Sg____len__(vector<unsigned char > const *self){
      return self->size();
    }
vector<unsigned char >::value_type vector_Sl_unsigned_SS_char_Sg__pop(vector<unsigned char > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<unsigned char >::value_type x = self->back();
      self->pop_back();
      return x;
    }
std::vector<unsigned char > *vector_Sl_unsigned_SS_char_Sg____getslice__(vector<unsigned char > *self,vector<unsigned char >::difference_type i,vector<unsigned char >::difference_type j){
      return swigpy::getslice(self, i, j);
    }
void vector_Sl_unsigned_SS_char_Sg____setslice__(vector<unsigned char > *self,vector<unsigned char >::difference_type i,vector<unsigned char >::difference_type j,std::vector<unsigned char > const &v){
      swigpy::setslice(self, i, j, v);
    }
void vector_Sl_unsigned_SS_char_Sg____delslice__(vector<unsigned char > *self,vector<unsigned char >::difference_type i,vector<unsigned char >::difference_type j){
      swigpy::delslice(self, i, j);
    }
void vector_Sl_unsigned_SS_char_Sg____delitem__(vector<unsigned char > *self,vector<unsigned char >::difference_type i){
      self->erase(swigpy::getpos(self,i));
    }
vector<unsigned char >::value_type const &vector_Sl_unsigned_SS_char_Sg____getitem__(vector<unsigned char > const *self,vector<unsigned char >::difference_type i){
      return *(swigpy::cgetpos(self, i));
    }
void vector_Sl_unsigned_SS_char_Sg____setitem__(vector<unsigned char > *self,vector<unsigned char >::difference_type i,vector<unsigned char >::value_type const &x){
      *(swigpy::getpos(self,i)) = x;
    }
void vector_Sl_unsigned_SS_char_Sg__append(vector<unsigned char > *self,vector<unsigned char >::value_type const &x){
      self->push_back(x);
    }

  namespace swigpy {
    template <>  struct traits<CK_ATTRIBUTE_SMART > {
      typedef pointer_category category;
      static const char* type_name() { return"CK_ATTRIBUTE_SMART"; }
    };
  }


      namespace swigpy {
	template <>  struct traits<std::vector<CK_ATTRIBUTE_SMART > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "CK_ATTRIBUTE_SMART" " >";
	  }
	};
      }
    
bool vector_Sl_CK_ATTRIBUTE_SMART_Sg____nonzero__(vector<CK_ATTRIBUTE_SMART > const *self){
      return !(self->empty());
    }
vector<CK_ATTRIBUTE_SMART >::size_type vector_Sl_CK_ATTRIBUTE_SMART_Sg____len__(vector<CK_ATTRIBUTE_SMART > const *self){
      return self->size();
    }
vector<CK_ATTRIBUTE_SMART >::value_type vector_Sl_CK_ATTRIBUTE_SMART_Sg__pop(vector<CK_ATTRIBUTE_SMART > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<CK_ATTRIBUTE_SMART >::value_type x = self->back();
      self->pop_back();
      return x;
    }
std::vector<CK_ATTRIBUTE_SMART > *vector_Sl_CK_ATTRIBUTE_SMART_Sg____getslice__(vector<CK_ATTRIBUTE_SMART > *self,vector<CK_ATTRIBUTE_SMART >::difference_type i,vector<CK_ATTRIBUTE_SMART >::difference_type j){
      return swigpy::getslice(self, i, j);
    }
void vector_Sl_CK_ATTRIBUTE_SMART_Sg____setslice__(vector<CK_ATTRIBUTE_SMART > *self,vector<CK_ATTRIBUTE_SMART >::difference_type i,vector<CK_ATTRIBUTE_SMART >::difference_type j,std::vector<CK_ATTRIBUTE_SMART > const &v){
      swigpy::setslice(self, i, j, v);
    }
void vector_Sl_CK_ATTRIBUTE_SMART_Sg____delslice__(vector<CK_ATTRIBUTE_SMART > *self,vector<CK_ATTRIBUTE_SMART >::difference_type i,vector<CK_ATTRIBUTE_SMART >::difference_type j){
      swigpy::delslice(self, i, j);
    }
void vector_Sl_CK_ATTRIBUTE_SMART_Sg____delitem__(vector<CK_ATTRIBUTE_SMART > *self,vector<CK_ATTRIBUTE_SMART >::difference_type i){
      self->erase(swigpy::getpos(self,i));
    }
vector<CK_ATTRIBUTE_SMART >::value_type const &vector_Sl_CK_ATTRIBUTE_SMART_Sg____getitem__(vector<CK_ATTRIBUTE_SMART > const *self,vector<CK_ATTRIBUTE_SMART >::difference_type i){
      return *(swigpy::cgetpos(self, i));
    }
void vector_Sl_CK_ATTRIBUTE_SMART_Sg____setitem__(vector<CK_ATTRIBUTE_SMART > *self,vector<CK_ATTRIBUTE_SMART >::difference_type i,vector<CK_ATTRIBUTE_SMART >::value_type const &x){
      *(swigpy::getpos(self,i)) = x;
    }
void vector_Sl_CK_ATTRIBUTE_SMART_Sg__append(vector<CK_ATTRIBUTE_SMART > *self,vector<CK_ATTRIBUTE_SMART >::value_type const &x){
      self->push_back(x);
    }

typedef CK_SESSION_HANDLE CK_SESSION_HANDLE;

CK_SESSION_HANDLE *new_CK_SESSION_HANDLE(){
  return new CK_SESSION_HANDLE();
}
void delete_CK_SESSION_HANDLE(CK_SESSION_HANDLE *self){
  if (self) delete self;
}
void CK_SESSION_HANDLE_assign(CK_SESSION_HANDLE *self,CK_SESSION_HANDLE value){
  *self = value;
}
CK_SESSION_HANDLE CK_SESSION_HANDLE_value(CK_SESSION_HANDLE *self){
  return *self;
}
CK_SESSION_HANDLE *CK_SESSION_HANDLE_cast(CK_SESSION_HANDLE *self){
  return self;
}
CK_SESSION_HANDLE *CK_SESSION_HANDLE_frompointer(CK_SESSION_HANDLE *t){
  return (CK_SESSION_HANDLE *) t;
}
PyKCS11String CK_INFO_GetManufacturerID(CK_INFO *self){
		return PyKCS11String(self->manufacturerID, sizeof(self->manufacturerID));
	}
PyKCS11String CK_INFO_GetLibraryDescription(CK_INFO *self){
		return PyKCS11String(self->libraryDescription, sizeof(self->libraryDescription));
	}
PyKCS11String CK_INFO_GetLibraryVersion(CK_INFO *self){
		char szVal[10];
		sprintf(szVal, "%d.%d", self->libraryVersion.major, self->libraryVersion.minor);
		return PyKCS11String(szVal);
	}
PyKCS11String CK_SLOT_INFO_GetManufacturerID(CK_SLOT_INFO *self){
		return PyKCS11String(self->manufacturerID, sizeof(self->manufacturerID));
	}
PyKCS11String CK_SLOT_INFO_GetSlotDescription(CK_SLOT_INFO *self){
		return PyKCS11String(self->slotDescription, sizeof(self->slotDescription));
	}
PyKCS11String CK_SLOT_INFO_GetHardwareVersion(CK_SLOT_INFO *self){
		char szVal[10];
		sprintf(szVal, "%d.%02d", self->hardwareVersion.major, self->hardwareVersion.minor);
		return PyKCS11String(szVal);
	}
PyKCS11String CK_SLOT_INFO_GetFirmwareVersion(CK_SLOT_INFO *self){
		char szVal[10];
		sprintf(szVal, "%d.%02d", self->firmwareVersion.major, self->firmwareVersion.minor);
		return PyKCS11String(szVal);
	}
PyKCS11String CK_TOKEN_INFO_GetLabel(CK_TOKEN_INFO *self){
		return PyKCS11String(self->label, sizeof(self->label));
	}
PyKCS11String CK_TOKEN_INFO_GetManufacturerID(CK_TOKEN_INFO *self){
		return PyKCS11String(self->manufacturerID, sizeof(self->manufacturerID));
	}
PyKCS11String CK_TOKEN_INFO_GetModel(CK_TOKEN_INFO *self){
		return PyKCS11String(self->model, sizeof(self->model));
	}
PyKCS11String CK_TOKEN_INFO_GetSerialNumber(CK_TOKEN_INFO *self){
		return PyKCS11String(self->serialNumber, sizeof(self->serialNumber));
	}
PyKCS11String CK_TOKEN_INFO_GetFirmwareVersion(CK_TOKEN_INFO *self){
		char szVal[10];
		sprintf(szVal, "%d.%02d", self->firmwareVersion.major, self->firmwareVersion.minor);
		return PyKCS11String(szVal);
	}
PyKCS11String CK_DATE_GetYear(CK_DATE *self){
		char szVal[10];
		memcpy(szVal, self->year, sizeof(self->year) );
		return PyKCS11String(szVal);
	}
PyKCS11String CK_DATE_GetMonth(CK_DATE *self){
		char szVal[10];
		memcpy(szVal, self->month, sizeof(self->month) );
		return PyKCS11String(szVal);
	}
PyKCS11String CK_DATE_GetDay(CK_DATE *self){
		char szVal[10];
		memcpy(szVal, self->day, sizeof(self->day) );
		return PyKCS11String(szVal);
	}
CK_MECHANISM *new_CK_MECHANISM(){
		CK_MECHANISM* m = new CK_MECHANISM();
		m->ulParameterLen = m->mechanism = 0; m->pParameter = NULL;
		return m;
	}

SWIGSTATICINLINE(int)
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  char* cptr = 0;
  if (SWIG_AsCharPtrAndSize(obj, &cptr, (size_t*)(0))) {
    if (val) *val = cptr;
    return 1;
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "a char* is expected");
  }
  return 0;
}


SWIGSTATICINLINE(int)
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  /*  if (val) *val = PyObject_IsTrue(obj); return 1; */
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = (bool)res;
    return 1;
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "a bool is expected");
  }
  return 0;
}


SWIGSTATICINLINE(bool)
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_cdata(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    int arg2 = (int) 1 ;
    SWIGCDATA result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:cdata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,&arg1,0,SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (int)SWIG_As_int(obj1); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = cdata_void(arg1,arg2);
    
    {
        resultobj = PyString_FromStringAndSize((&result)->data,(&result)->len);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_memmove(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    void *arg2 = (void *) 0 ;
    int arg3 ;
    char *buf2 ;
    size_t size2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:memmove",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,&arg1,0,SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        int res = SWIG_AsCharPtrAndSize(obj1, &buf2, &size2);
        if (!res) SWIG_fail;
        arg2 = (void *) buf2;
        arg3 = (int) size2 - 1;
    }
    memmove(arg1,(void const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckintlist__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ckintlist")) goto fail;
    result = (vector<int > *)new vector<int >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckintlist__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = 0 ;
    vector<int > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ckintlist",&obj0)) goto fail;
    if (!(res1 = swigpy::asptr(obj0, &arg1)) || !(arg1)) SWIG_fail;
    result = (vector<int > *)new vector<int >((std::vector<int > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTint_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_ckintlist_empty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckintlist_empty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)((vector<int > const *)arg1)->empty();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckintlist_size",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = ((vector<int > const *)arg1)->size();
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckintlist_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_swap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    std::vector<int > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckintlist_swap",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckintlist__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int >::size_type arg1 ;
    vector<int > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ckintlist",&obj0)) goto fail;
    arg1 = (vector<int >::size_type)SWIG_As_unsigned_SS_long(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (vector<int > *)new vector<int >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckintlist_pop_back",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->pop_back();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckintlist_resize",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<int >::size_type)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->resize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckintlist__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int >::size_type arg1 ;
    vector<int >::value_type *arg2 = 0 ;
    vector<int > *result;
    vector<int >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ckintlist",&obj0,&obj1)) goto fail;
    arg1 = (vector<int >::size_type)SWIG_As_unsigned_SS_long(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    temp2 = (vector<int >::value_type) SWIG_As_int(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    result = (vector<int > *)new vector<int >(arg1,(vector<int >::value_type const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckintlist(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ckintlist__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_ckintlist__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swigpy::asptr(argv[0], (std::vector<int >**)(0));
        if (_v) {
            return _wrap_new_ckintlist__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_ckintlist__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_ckintlist'");
    return NULL;
}


static PyObject *_wrap_ckintlist_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::value_type *arg2 = 0 ;
    vector<int >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckintlist_push_back",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    temp2 = (vector<int >::value_type) SWIG_As_int(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->push_back((vector<int >::value_type const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_front(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckintlist_front",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        vector<int >::value_type const &_result_ref = ((vector<int > const *)arg1)->front();
        result = (vector<int >::value_type *) &_result_ref;
    }
    
    resultobj = SWIG_From_int((int)*(result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckintlist_back",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        vector<int >::value_type const &_result_ref = ((vector<int > const *)arg1)->back();
        result = (vector<int >::value_type *) &_result_ref;
    }
    
    resultobj = SWIG_From_int((int)*(result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_assign(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::size_type arg2 ;
    vector<int >::value_type *arg3 = 0 ;
    vector<int >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckintlist_assign",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<int >::size_type)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    temp3 = (vector<int >::value_type) SWIG_As_int(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = &temp3;
    (arg1)->assign(arg2,(vector<int >::value_type const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::size_type arg2 ;
    vector<int >::value_type *arg3 = 0 ;
    vector<int >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckintlist_resize",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<int >::size_type)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    temp3 = (vector<int >::value_type) SWIG_As_int(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = &temp3;
    (arg1)->resize(arg2,(vector<int >::value_type const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_vectorTint_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_ckintlist_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_vectorTint_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_ckintlist_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'ckintlist_resize'");
    return NULL;
}


static PyObject *_wrap_ckintlist_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckintlist_reserve",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<int >::size_type)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->reserve(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckintlist_capacity",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = ((vector<int > const *)arg1)->capacity();
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckintlist___nonzero__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)vector_Sl_int_Sg____nonzero__((vector<int > const *)arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist___len__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckintlist___len__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = vector_Sl_int_Sg____len__((vector<int > const *)arg1);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_pop(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckintlist_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (vector<int >::value_type)vector_Sl_int_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::difference_type arg2 ;
    vector<int >::difference_type arg3 ;
    std::vector<int > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckintlist___getslice__",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<int >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (vector<int >::difference_type)SWIG_As_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (std::vector<int > *)vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::difference_type arg2 ;
    vector<int >::difference_type arg3 ;
    std::vector<int > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ckintlist___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<int >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (vector<int >::difference_type)SWIG_As_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if (!(res4 = swigpy::asptr(obj3, &arg4)) || !(arg4)) SWIG_fail;
    {
        try {
            vector_Sl_int_Sg____setslice__(arg1,arg2,arg3,(std::vector<int > const &)*arg4);
        }
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_ckintlist___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::difference_type arg2 ;
    vector<int >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckintlist___delslice__",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<int >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (vector<int >::difference_type)SWIG_As_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckintlist___delitem__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<int >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            vector_Sl_int_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::difference_type arg2 ;
    vector<int >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckintlist___getitem__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<int >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            {
                vector<int >::value_type const &_result_ref = vector_Sl_int_Sg____getitem__((vector<int > const *)arg1,arg2);
                result = (vector<int >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = SWIG_From_int((int)*(result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::difference_type arg2 ;
    vector<int >::value_type *arg3 = 0 ;
    vector<int >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckintlist___setitem__",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<int >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    temp3 = (vector<int >::value_type) SWIG_As_int(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = &temp3;
    {
        try {
            vector_Sl_int_Sg____setitem__(arg1,arg2,(vector<int >::value_type const &)*arg3);
        }
        catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckintlist_append(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    vector<int >::value_type *arg2 = 0 ;
    vector<int >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckintlist_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    temp2 = (vector<int >::value_type) SWIG_As_int(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    vector_Sl_int_Sg__append(arg1,(vector<int >::value_type const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ckintlist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<int > *arg1 = (vector<int > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ckintlist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ckintlist_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_vectorTint_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ckbytelist__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ckbytelist")) goto fail;
    result = (vector<unsigned char > *)new vector<unsigned char >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckbytelist__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<unsigned char > *arg1 = 0 ;
    vector<unsigned char > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ckbytelist",&obj0)) goto fail;
    if (!(res1 = swigpy::asptr(obj0, &arg1)) || !(arg1)) SWIG_fail;
    result = (vector<unsigned char > *)new vector<unsigned char >((std::vector<unsigned char > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTunsigned_char_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_ckbytelist_empty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckbytelist_empty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)((vector<unsigned char > const *)arg1)->empty();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckbytelist_size",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = ((vector<unsigned char > const *)arg1)->size();
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckbytelist_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_swap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    std::vector<unsigned char > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckbytelist_swap",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckbytelist__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char >::size_type arg1 ;
    vector<unsigned char > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ckbytelist",&obj0)) goto fail;
    arg1 = (vector<unsigned char >::size_type)SWIG_As_unsigned_SS_long(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (vector<unsigned char > *)new vector<unsigned char >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckbytelist_pop_back",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->pop_back();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckbytelist_resize",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<unsigned char >::size_type)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->resize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckbytelist__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char >::size_type arg1 ;
    vector<unsigned char >::value_type *arg2 = 0 ;
    vector<unsigned char > *result;
    vector<unsigned char >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ckbytelist",&obj0,&obj1)) goto fail;
    arg1 = (vector<unsigned char >::size_type)SWIG_As_unsigned_SS_long(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    temp2 = (vector<unsigned char >::value_type) SWIG_As_unsigned_SS_char(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    result = (vector<unsigned char > *)new vector<unsigned char >(arg1,(vector<unsigned char >::value_type const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckbytelist(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ckbytelist__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_ckbytelist__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swigpy::asptr(argv[0], (std::vector<unsigned char >**)(0));
        if (_v) {
            return _wrap_new_ckbytelist__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_char(argv[1]);
            if (_v) {
                return _wrap_new_ckbytelist__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_ckbytelist'");
    return NULL;
}


static PyObject *_wrap_ckbytelist_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::value_type *arg2 = 0 ;
    vector<unsigned char >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckbytelist_push_back",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    temp2 = (vector<unsigned char >::value_type) SWIG_As_unsigned_SS_char(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->push_back((vector<unsigned char >::value_type const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_front(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckbytelist_front",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        vector<unsigned char >::value_type const &_result_ref = ((vector<unsigned char > const *)arg1)->front();
        result = (vector<unsigned char >::value_type *) &_result_ref;
    }
    
    resultobj = SWIG_From_unsigned_SS_char((unsigned char)*(result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckbytelist_back",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        vector<unsigned char >::value_type const &_result_ref = ((vector<unsigned char > const *)arg1)->back();
        result = (vector<unsigned char >::value_type *) &_result_ref;
    }
    
    resultobj = SWIG_From_unsigned_SS_char((unsigned char)*(result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_assign(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::size_type arg2 ;
    vector<unsigned char >::value_type *arg3 = 0 ;
    vector<unsigned char >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckbytelist_assign",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<unsigned char >::size_type)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    temp3 = (vector<unsigned char >::value_type) SWIG_As_unsigned_SS_char(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = &temp3;
    (arg1)->assign(arg2,(vector<unsigned char >::value_type const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::size_type arg2 ;
    vector<unsigned char >::value_type *arg3 = 0 ;
    vector<unsigned char >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckbytelist_resize",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<unsigned char >::size_type)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    temp3 = (vector<unsigned char >::value_type) SWIG_As_unsigned_SS_char(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = &temp3;
    (arg1)->resize(arg2,(vector<unsigned char >::value_type const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_vectorTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_ckbytelist_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_vectorTunsigned_char_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_char(argv[2]);
                if (_v) {
                    return _wrap_ckbytelist_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'ckbytelist_resize'");
    return NULL;
}


static PyObject *_wrap_ckbytelist_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckbytelist_reserve",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<unsigned char >::size_type)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->reserve(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckbytelist_capacity",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = ((vector<unsigned char > const *)arg1)->capacity();
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckbytelist___nonzero__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)vector_Sl_unsigned_SS_char_Sg____nonzero__((vector<unsigned char > const *)arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist___len__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckbytelist___len__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = vector_Sl_unsigned_SS_char_Sg____len__((vector<unsigned char > const *)arg1);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_pop(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckbytelist_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (vector<unsigned char >::value_type)vector_Sl_unsigned_SS_char_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = SWIG_From_unsigned_SS_char((unsigned char)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::difference_type arg2 ;
    vector<unsigned char >::difference_type arg3 ;
    std::vector<unsigned char > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckbytelist___getslice__",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<unsigned char >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (vector<unsigned char >::difference_type)SWIG_As_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (std::vector<unsigned char > *)vector_Sl_unsigned_SS_char_Sg____getslice__(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTunsigned_char_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::difference_type arg2 ;
    vector<unsigned char >::difference_type arg3 ;
    std::vector<unsigned char > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ckbytelist___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<unsigned char >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (vector<unsigned char >::difference_type)SWIG_As_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if (!(res4 = swigpy::asptr(obj3, &arg4)) || !(arg4)) SWIG_fail;
    {
        try {
            vector_Sl_unsigned_SS_char_Sg____setslice__(arg1,arg2,arg3,(std::vector<unsigned char > const &)*arg4);
        }
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_ckbytelist___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::difference_type arg2 ;
    vector<unsigned char >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckbytelist___delslice__",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<unsigned char >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (vector<unsigned char >::difference_type)SWIG_As_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    vector_Sl_unsigned_SS_char_Sg____delslice__(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckbytelist___delitem__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<unsigned char >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            vector_Sl_unsigned_SS_char_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::difference_type arg2 ;
    vector<unsigned char >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckbytelist___getitem__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<unsigned char >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            {
                vector<unsigned char >::value_type const &_result_ref = vector_Sl_unsigned_SS_char_Sg____getitem__((vector<unsigned char > const *)arg1,arg2);
                result = (vector<unsigned char >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = SWIG_From_unsigned_SS_char((unsigned char)*(result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::difference_type arg2 ;
    vector<unsigned char >::value_type *arg3 = 0 ;
    vector<unsigned char >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckbytelist___setitem__",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<unsigned char >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    temp3 = (vector<unsigned char >::value_type) SWIG_As_unsigned_SS_char(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = &temp3;
    {
        try {
            vector_Sl_unsigned_SS_char_Sg____setitem__(arg1,arg2,(vector<unsigned char >::value_type const &)*arg3);
        }
        catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckbytelist_append(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    vector<unsigned char >::value_type *arg2 = 0 ;
    vector<unsigned char >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckbytelist_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    temp2 = (vector<unsigned char >::value_type) SWIG_As_unsigned_SS_char(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    vector_Sl_unsigned_SS_char_Sg__append(arg1,(vector<unsigned char >::value_type const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ckbytelist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<unsigned char > *arg1 = (vector<unsigned char > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ckbytelist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ckbytelist_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_vectorTunsigned_char_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ckattrlist__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ckattrlist")) goto fail;
    result = (vector<CK_ATTRIBUTE_SMART > *)new vector<CK_ATTRIBUTE_SMART >();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckattrlist__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    std::vector<CK_ATTRIBUTE_SMART > *arg1 = 0 ;
    vector<CK_ATTRIBUTE_SMART > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ckattrlist",&obj0)) goto fail;
    if (!(res1 = swigpy::asptr(obj0, &arg1)) || !(arg1)) SWIG_fail;
    result = (vector<CK_ATTRIBUTE_SMART > *)new vector<CK_ATTRIBUTE_SMART >((std::vector<CK_ATTRIBUTE_SMART > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_ckattrlist_empty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckattrlist_empty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)((vector<CK_ATTRIBUTE_SMART > const *)arg1)->empty();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_size(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckattrlist_size",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = ((vector<CK_ATTRIBUTE_SMART > const *)arg1)->size();
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_clear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckattrlist_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_swap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    std::vector<CK_ATTRIBUTE_SMART > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckattrlist_swap",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->swap(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckattrlist__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART >::size_type arg1 ;
    vector<CK_ATTRIBUTE_SMART > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ckattrlist",&obj0)) goto fail;
    arg1 = (vector<CK_ATTRIBUTE_SMART >::size_type)SWIG_As_unsigned_SS_long(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (vector<CK_ATTRIBUTE_SMART > *)new vector<CK_ATTRIBUTE_SMART >(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckattrlist_pop_back",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->pop_back();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckattrlist_resize",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<CK_ATTRIBUTE_SMART >::size_type)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->resize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckattrlist__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART >::size_type arg1 ;
    vector<CK_ATTRIBUTE_SMART >::value_type *arg2 = 0 ;
    vector<CK_ATTRIBUTE_SMART > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ckattrlist",&obj0,&obj1)) goto fail;
    arg1 = (vector<CK_ATTRIBUTE_SMART >::size_type)SWIG_As_unsigned_SS_long(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (vector<CK_ATTRIBUTE_SMART > *)new vector<CK_ATTRIBUTE_SMART >(arg1,(vector<CK_ATTRIBUTE_SMART >::value_type const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ckattrlist(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ckattrlist__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_ckattrlist__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swigpy::asptr(argv[0], (std::vector<CK_ATTRIBUTE_SMART >**)(0));
        if (_v) {
            return _wrap_new_ckattrlist__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_CK_ATTRIBUTE_SMART, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_ckattrlist__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_ckattrlist'");
    return NULL;
}


static PyObject *_wrap_ckattrlist_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckattrlist_push_back",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->push_back((vector<CK_ATTRIBUTE_SMART >::value_type const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_front(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckattrlist_front",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        vector<CK_ATTRIBUTE_SMART >::value_type const &_result_ref = ((vector<CK_ATTRIBUTE_SMART > const *)arg1)->front();
        result = (vector<CK_ATTRIBUTE_SMART >::value_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_ATTRIBUTE_SMART, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_back(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckattrlist_back",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        vector<CK_ATTRIBUTE_SMART >::value_type const &_result_ref = ((vector<CK_ATTRIBUTE_SMART > const *)arg1)->back();
        result = (vector<CK_ATTRIBUTE_SMART >::value_type *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_ATTRIBUTE_SMART, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_assign(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::size_type arg2 ;
    vector<CK_ATTRIBUTE_SMART >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckattrlist_assign",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<CK_ATTRIBUTE_SMART >::size_type)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->assign(arg2,(vector<CK_ATTRIBUTE_SMART >::value_type const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::size_type arg2 ;
    vector<CK_ATTRIBUTE_SMART >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckattrlist_resize",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<CK_ATTRIBUTE_SMART >::size_type)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    (arg1)->resize(arg2,(vector<CK_ATTRIBUTE_SMART >::value_type const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_ckattrlist_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_CK_ATTRIBUTE_SMART, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_ckattrlist_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'ckattrlist_resize'");
    return NULL;
}


static PyObject *_wrap_ckattrlist_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckattrlist_reserve",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<CK_ATTRIBUTE_SMART >::size_type)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->reserve(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckattrlist_capacity",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = ((vector<CK_ATTRIBUTE_SMART > const *)arg1)->capacity();
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckattrlist___nonzero__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)vector_Sl_CK_ATTRIBUTE_SMART_Sg____nonzero__((vector<CK_ATTRIBUTE_SMART > const *)arg1);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist___len__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckattrlist___len__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = vector_Sl_CK_ATTRIBUTE_SMART_Sg____len__((vector<CK_ATTRIBUTE_SMART > const *)arg1);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_pop(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ckattrlist_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = vector_Sl_CK_ATTRIBUTE_SMART_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        vector<CK_ATTRIBUTE_SMART >::value_type * resultptr;
        resultptr = new vector<CK_ATTRIBUTE_SMART >::value_type((vector<CK_ATTRIBUTE_SMART >::value_type &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CK_ATTRIBUTE_SMART, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::difference_type arg2 ;
    vector<CK_ATTRIBUTE_SMART >::difference_type arg3 ;
    std::vector<CK_ATTRIBUTE_SMART > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckattrlist___getslice__",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<CK_ATTRIBUTE_SMART >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (vector<CK_ATTRIBUTE_SMART >::difference_type)SWIG_As_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (std::vector<CK_ATTRIBUTE_SMART > *)vector_Sl_CK_ATTRIBUTE_SMART_Sg____getslice__(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::difference_type arg2 ;
    vector<CK_ATTRIBUTE_SMART >::difference_type arg3 ;
    std::vector<CK_ATTRIBUTE_SMART > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ckattrlist___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<CK_ATTRIBUTE_SMART >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (vector<CK_ATTRIBUTE_SMART >::difference_type)SWIG_As_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if (!(res4 = swigpy::asptr(obj3, &arg4)) || !(arg4)) SWIG_fail;
    {
        try {
            vector_Sl_CK_ATTRIBUTE_SMART_Sg____setslice__(arg1,arg2,arg3,(std::vector<CK_ATTRIBUTE_SMART > const &)*arg4);
        }
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_ckattrlist___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::difference_type arg2 ;
    vector<CK_ATTRIBUTE_SMART >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckattrlist___delslice__",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<CK_ATTRIBUTE_SMART >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (vector<CK_ATTRIBUTE_SMART >::difference_type)SWIG_As_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    vector_Sl_CK_ATTRIBUTE_SMART_Sg____delslice__(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckattrlist___delitem__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<CK_ATTRIBUTE_SMART >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            vector_Sl_CK_ATTRIBUTE_SMART_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::difference_type arg2 ;
    vector<CK_ATTRIBUTE_SMART >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckattrlist___getitem__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<CK_ATTRIBUTE_SMART >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            {
                vector<CK_ATTRIBUTE_SMART >::value_type const &_result_ref = vector_Sl_CK_ATTRIBUTE_SMART_Sg____getitem__((vector<CK_ATTRIBUTE_SMART > const *)arg1,arg2);
                result = (vector<CK_ATTRIBUTE_SMART >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_ATTRIBUTE_SMART, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::difference_type arg2 ;
    vector<CK_ATTRIBUTE_SMART >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ckattrlist___setitem__",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (vector<CK_ATTRIBUTE_SMART >::difference_type)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    {
        try {
            vector_Sl_CK_ATTRIBUTE_SMART_Sg____setitem__(arg1,arg2,(vector<CK_ATTRIBUTE_SMART >::value_type const &)*arg3);
        }
        catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ckattrlist_append(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    vector<CK_ATTRIBUTE_SMART >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ckattrlist_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    vector_Sl_CK_ATTRIBUTE_SMART_Sg__append(arg1,(vector<CK_ATTRIBUTE_SMART >::value_type const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ckattrlist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    vector<CK_ATTRIBUTE_SMART > *arg1 = (vector<CK_ATTRIBUTE_SMART > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ckattrlist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ckattrlist_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_CK_SESSION_HANDLE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SESSION_HANDLE *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CK_SESSION_HANDLE")) goto fail;
    result = (CK_SESSION_HANDLE *)new_CK_SESSION_HANDLE();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_SESSION_HANDLE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CK_SESSION_HANDLE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SESSION_HANDLE *arg1 = (CK_SESSION_HANDLE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CK_SESSION_HANDLE",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete_CK_SESSION_HANDLE(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SESSION_HANDLE_assign(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SESSION_HANDLE *arg1 = (CK_SESSION_HANDLE *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CK_SESSION_HANDLE_assign",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    CK_SESSION_HANDLE_assign(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SESSION_HANDLE_value(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SESSION_HANDLE *arg1 = (CK_SESSION_HANDLE *) 0 ;
    CK_SESSION_HANDLE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SESSION_HANDLE_value",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_SESSION_HANDLE_value(arg1);
    
    {
        CK_SESSION_HANDLE * resultptr;
        resultptr = new CK_SESSION_HANDLE((CK_SESSION_HANDLE &) result);
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CK_SESSION_HANDLE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SESSION_HANDLE_cast(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SESSION_HANDLE *arg1 = (CK_SESSION_HANDLE *) 0 ;
    CK_SESSION_HANDLE *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SESSION_HANDLE_cast",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_SESSION_HANDLE *)CK_SESSION_HANDLE_cast(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_SESSION_HANDLE, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SESSION_HANDLE_frompointer(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SESSION_HANDLE *arg1 = (CK_SESSION_HANDLE *) 0 ;
    CK_SESSION_HANDLE *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SESSION_HANDLE_frompointer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_SESSION_HANDLE *)CK_SESSION_HANDLE_frompointer(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_SESSION_HANDLE, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CK_SESSION_HANDLE_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CK_SESSION_HANDLE, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CK_VERSION_major_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_VERSION *arg1 = (CK_VERSION *) 0 ;
    unsigned char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_VERSION_major_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_VERSION,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned char) ((arg1)->major);
    
    resultobj = SWIG_From_unsigned_SS_char((unsigned char)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_VERSION_minor_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_VERSION *arg1 = (CK_VERSION *) 0 ;
    unsigned char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_VERSION_minor_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_VERSION,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned char) ((arg1)->minor);
    
    resultobj = SWIG_From_unsigned_SS_char((unsigned char)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CK_VERSION(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_VERSION *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CK_VERSION")) goto fail;
    result = (CK_VERSION *)new CK_VERSION();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_VERSION, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CK_VERSION(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_VERSION *arg1 = (CK_VERSION *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CK_VERSION",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_VERSION,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CK_VERSION_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CK_VERSION, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CK_INFO_cryptokiVersion_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_INFO *arg1 = (CK_INFO *) 0 ;
    CK_VERSION *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_INFO_cryptokiVersion_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_VERSION *)& ((arg1)->cryptokiVersion);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_VERSION, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_INFO_manufacturerID_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_INFO *arg1 = (CK_INFO *) 0 ;
    unsigned char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_INFO_manufacturerID_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned char *)(unsigned char *) ((arg1)->manufacturerID);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_INFO_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_INFO *arg1 = (CK_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_INFO_flags_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->flags);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_INFO_libraryDescription_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_INFO *arg1 = (CK_INFO *) 0 ;
    unsigned char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_INFO_libraryDescription_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned char *)(unsigned char *) ((arg1)->libraryDescription);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_INFO_libraryVersion_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_INFO *arg1 = (CK_INFO *) 0 ;
    CK_VERSION *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_INFO_libraryVersion_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_VERSION *)& ((arg1)->libraryVersion);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_VERSION, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_INFO_GetManufacturerID(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_INFO *arg1 = (CK_INFO *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_INFO_GetManufacturerID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_INFO_GetManufacturerID(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_INFO_GetLibraryDescription(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_INFO *arg1 = (CK_INFO *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_INFO_GetLibraryDescription",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_INFO_GetLibraryDescription(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_INFO_GetLibraryVersion(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_INFO *arg1 = (CK_INFO *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_INFO_GetLibraryVersion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_INFO_GetLibraryVersion(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CK_INFO(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_INFO *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CK_INFO")) goto fail;
    result = (CK_INFO *)new CK_INFO();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_INFO, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CK_INFO(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_INFO *arg1 = (CK_INFO *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CK_INFO",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CK_INFO_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CK_INFO, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CK_SLOT_INFO_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SLOT_INFO *arg1 = (CK_SLOT_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SLOT_INFO_flags_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SLOT_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->flags);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SLOT_INFO_hardwareVersion_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SLOT_INFO *arg1 = (CK_SLOT_INFO *) 0 ;
    CK_VERSION *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SLOT_INFO_hardwareVersion_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SLOT_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_VERSION *)& ((arg1)->hardwareVersion);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_VERSION, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SLOT_INFO_firmwareVersion_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SLOT_INFO *arg1 = (CK_SLOT_INFO *) 0 ;
    CK_VERSION *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SLOT_INFO_firmwareVersion_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SLOT_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_VERSION *)& ((arg1)->firmwareVersion);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_VERSION, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SLOT_INFO_GetManufacturerID(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SLOT_INFO *arg1 = (CK_SLOT_INFO *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SLOT_INFO_GetManufacturerID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SLOT_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_SLOT_INFO_GetManufacturerID(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SLOT_INFO_GetSlotDescription(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SLOT_INFO *arg1 = (CK_SLOT_INFO *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SLOT_INFO_GetSlotDescription",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SLOT_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_SLOT_INFO_GetSlotDescription(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SLOT_INFO_GetHardwareVersion(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SLOT_INFO *arg1 = (CK_SLOT_INFO *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SLOT_INFO_GetHardwareVersion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SLOT_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_SLOT_INFO_GetHardwareVersion(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SLOT_INFO_GetFirmwareVersion(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SLOT_INFO *arg1 = (CK_SLOT_INFO *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SLOT_INFO_GetFirmwareVersion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SLOT_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_SLOT_INFO_GetFirmwareVersion(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CK_SLOT_INFO(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SLOT_INFO *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CK_SLOT_INFO")) goto fail;
    result = (CK_SLOT_INFO *)new CK_SLOT_INFO();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_SLOT_INFO, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CK_SLOT_INFO(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SLOT_INFO *arg1 = (CK_SLOT_INFO *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CK_SLOT_INFO",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SLOT_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CK_SLOT_INFO_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CK_SLOT_INFO, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CK_TOKEN_INFO_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_flags_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->flags);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_ulMaxSessionCount_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_ulMaxSessionCount_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulMaxSessionCount);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_ulSessionCount_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_ulSessionCount_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulSessionCount);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_ulMaxRwSessionCount_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_ulMaxRwSessionCount_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulMaxRwSessionCount);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_ulRwSessionCount_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_ulRwSessionCount_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulRwSessionCount);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_ulMaxPinLen_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_ulMaxPinLen_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulMaxPinLen);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_ulMinPinLen_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_ulMinPinLen_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulMinPinLen);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_ulTotalPublicMemory_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_ulTotalPublicMemory_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulTotalPublicMemory);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_ulFreePublicMemory_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_ulFreePublicMemory_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulFreePublicMemory);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_ulTotalPrivateMemory_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_ulTotalPrivateMemory_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulTotalPrivateMemory);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_ulFreePrivateMemory_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_ulFreePrivateMemory_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulFreePrivateMemory);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_hardwareVersion_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    CK_VERSION *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_hardwareVersion_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_VERSION *)& ((arg1)->hardwareVersion);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_VERSION, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_firmwareVersion_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    CK_VERSION *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_firmwareVersion_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_VERSION *)& ((arg1)->firmwareVersion);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_VERSION, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_GetLabel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_GetLabel",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_TOKEN_INFO_GetLabel(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_GetManufacturerID(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_GetManufacturerID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_TOKEN_INFO_GetManufacturerID(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_GetModel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_GetModel",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_TOKEN_INFO_GetModel(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_GetSerialNumber(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_GetSerialNumber",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_TOKEN_INFO_GetSerialNumber(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_TOKEN_INFO_GetFirmwareVersion(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_TOKEN_INFO_GetFirmwareVersion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_TOKEN_INFO_GetFirmwareVersion(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CK_TOKEN_INFO(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CK_TOKEN_INFO")) goto fail;
    result = (CK_TOKEN_INFO *)new CK_TOKEN_INFO();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_TOKEN_INFO, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CK_TOKEN_INFO(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_TOKEN_INFO *arg1 = (CK_TOKEN_INFO *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CK_TOKEN_INFO",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CK_TOKEN_INFO_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CK_TOKEN_INFO, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CK_SESSION_INFO_slotID_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SESSION_INFO *arg1 = (CK_SESSION_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SESSION_INFO_slotID_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SESSION_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->slotID);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SESSION_INFO_state_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SESSION_INFO *arg1 = (CK_SESSION_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SESSION_INFO_state_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SESSION_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->state);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SESSION_INFO_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SESSION_INFO *arg1 = (CK_SESSION_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SESSION_INFO_flags_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SESSION_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->flags);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_SESSION_INFO_ulDeviceError_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SESSION_INFO *arg1 = (CK_SESSION_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_SESSION_INFO_ulDeviceError_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SESSION_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulDeviceError);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CK_SESSION_INFO(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SESSION_INFO *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CK_SESSION_INFO")) goto fail;
    result = (CK_SESSION_INFO *)new CK_SESSION_INFO();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_SESSION_INFO, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CK_SESSION_INFO(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_SESSION_INFO *arg1 = (CK_SESSION_INFO *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CK_SESSION_INFO",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_SESSION_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CK_SESSION_INFO_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CK_SESSION_INFO, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CK_DATE_GetYear(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_DATE *arg1 = (CK_DATE *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_DATE_GetYear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_DATE,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_DATE_GetYear(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_DATE_GetMonth(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_DATE *arg1 = (CK_DATE *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_DATE_GetMonth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_DATE,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_DATE_GetMonth(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_DATE_GetDay(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_DATE *arg1 = (CK_DATE *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_DATE_GetDay",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_DATE,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = CK_DATE_GetDay(arg1);
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CK_DATE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_DATE *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CK_DATE")) goto fail;
    result = (CK_DATE *)new CK_DATE();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_DATE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CK_DATE(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_DATE *arg1 = (CK_DATE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CK_DATE",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_DATE,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CK_DATE_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CK_DATE, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CK_MECHANISM_mechanism_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM *arg1 = (CK_MECHANISM *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CK_MECHANISM_mechanism_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->mechanism = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_MECHANISM_mechanism_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM *arg1 = (CK_MECHANISM *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_MECHANISM_mechanism_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->mechanism);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_MECHANISM_pParameter_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM *arg1 = (CK_MECHANISM *) 0 ;
    void *arg2 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CK_MECHANISM_pParameter_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,&arg2,0,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN)) == -1) SWIG_fail;
    if (arg1) (arg1)->pParameter = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_MECHANISM_pParameter_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM *arg1 = (CK_MECHANISM *) 0 ;
    void *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_MECHANISM_pParameter_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (void *) ((arg1)->pParameter);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_MECHANISM_ulParameterLen_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM *arg1 = (CK_MECHANISM *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CK_MECHANISM_ulParameterLen_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->ulParameterLen = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_MECHANISM_ulParameterLen_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM *arg1 = (CK_MECHANISM *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_MECHANISM_ulParameterLen_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulParameterLen);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CK_MECHANISM(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CK_MECHANISM")) goto fail;
    result = (CK_MECHANISM *)new_CK_MECHANISM();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_MECHANISM, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CK_MECHANISM(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM *arg1 = (CK_MECHANISM *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CK_MECHANISM",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CK_MECHANISM_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CK_MECHANISM, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CK_MECHANISM_INFO_ulMinKeySize_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM_INFO *arg1 = (CK_MECHANISM_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_MECHANISM_INFO_ulMinKeySize_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_MECHANISM_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulMinKeySize);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_MECHANISM_INFO_ulMaxKeySize_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM_INFO *arg1 = (CK_MECHANISM_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_MECHANISM_INFO_ulMaxKeySize_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_MECHANISM_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->ulMaxKeySize);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_MECHANISM_INFO_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM_INFO *arg1 = (CK_MECHANISM_INFO *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_MECHANISM_INFO_flags_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_MECHANISM_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->flags);
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CK_MECHANISM_INFO(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM_INFO *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CK_MECHANISM_INFO")) goto fail;
    result = (CK_MECHANISM_INFO *)new CK_MECHANISM_INFO();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_MECHANISM_INFO, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CK_MECHANISM_INFO(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_MECHANISM_INFO *arg1 = (CK_MECHANISM_INFO *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CK_MECHANISM_INFO",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_MECHANISM_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CK_MECHANISM_INFO_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CK_MECHANISM_INFO, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_CPKCS11Lib(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CPKCS11Lib")) goto fail;
    result = (CPKCS11Lib *)new CPKCS11Lib();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CPKCS11Lib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CPKCS11Lib(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CPKCS11Lib",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_Load(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    char *arg2 ;
    bool arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_Load",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) SWIG_fail;
    arg3 = (bool)SWIG_As_bool(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->Load((char const *)arg2,arg3);
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_Unload(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CPKCS11Lib_Unload",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)(arg1)->Unload();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_Initialize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_RV result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CPKCS11Lib_C_Initialize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_RV)(arg1)->C_Initialize();
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_Finalize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_RV result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CPKCS11Lib_C_Finalize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_RV)(arg1)->C_Finalize();
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_GetInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_INFO *arg2 = (CK_INFO *) 0 ;
    CK_RV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CPKCS11Lib_C_GetInfo",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_CK_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_RV)(arg1)->C_GetInfo(arg2);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_GetSlotList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    unsigned char arg2 ;
    std::vector<int > *arg3 = 0 ;
    CK_RV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_GetSlotList",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned char)SWIG_As_unsigned_SS_char(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_GetSlotList(arg2,*arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_GetSlotInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    unsigned long arg2 ;
    CK_SLOT_INFO *arg3 = (CK_SLOT_INFO *) 0 ;
    CK_RV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_GetSlotInfo",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_SLOT_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_RV)(arg1)->C_GetSlotInfo(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_GetTokenInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    unsigned long arg2 ;
    CK_TOKEN_INFO *arg3 = (CK_TOKEN_INFO *) 0 ;
    CK_RV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_GetTokenInfo",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_TOKEN_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_RV)(arg1)->C_GetTokenInfo(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_InitToken(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    unsigned long arg2 ;
    unsigned char *arg3 = (unsigned char *) 0 ;
    unsigned long arg4 ;
    char *arg5 ;
    CK_RV result;
    char *buf3 ;
    size_t size3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_InitToken",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        int res = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3);
        if (!res) SWIG_fail;
        arg3 = (unsigned char *) buf3;
        arg4 = (unsigned long) size3 - 1;
    }
    if (!SWIG_AsCharPtr(obj3, (char**)&arg5)) SWIG_fail;
    result = (CK_RV)(arg1)->C_InitToken(arg2,arg3,arg4,(char const *)arg5);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_InitPIN(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    unsigned char *arg3 = (unsigned char *) 0 ;
    unsigned long arg4 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    char *buf3 ;
    size_t size3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_InitPIN",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        int res = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3);
        if (!res) SWIG_fail;
        arg3 = (unsigned char *) buf3;
        arg4 = (unsigned long) size3 - 1;
    }
    result = (CK_RV)(arg1)->C_InitPIN(arg2,arg3,arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_SetPIN(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    unsigned char *arg3 = (unsigned char *) 0 ;
    unsigned long arg4 ;
    unsigned char *arg5 = (unsigned char *) 0 ;
    unsigned long arg6 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    char *buf3 ;
    size_t size3 ;
    char *buf4 ;
    size_t size4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_SetPIN",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        int res = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3);
        if (!res) SWIG_fail;
        arg3 = (unsigned char *) buf3;
        arg4 = (unsigned long) size3 - 1;
    }
    {
        int res = SWIG_AsCharPtrAndSize(obj3, &buf4, &size4);
        if (!res) SWIG_fail;
        arg5 = (unsigned char *) buf4;
        arg6 = (unsigned long) size4 - 1;
    }
    result = (CK_RV)(arg1)->C_SetPIN(arg2,arg3,arg4,arg5,arg6);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_OpenSession(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    unsigned long arg2 ;
    unsigned long arg3 ;
    CK_SESSION_HANDLE *arg4 = 0 ;
    CK_RV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_OpenSession",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned long)SWIG_As_unsigned_SS_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_OpenSession(arg2,arg3,*arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_CloseSession(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CPKCS11Lib_C_CloseSession",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    result = (CK_RV)(arg1)->C_CloseSession(arg2);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_CloseAllSessions(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    unsigned long arg2 ;
    CK_RV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CPKCS11Lib_C_CloseAllSessions",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (CK_RV)(arg1)->C_CloseAllSessions(arg2);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_GetSessionInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_SESSION_INFO *arg3 = (CK_SESSION_INFO *) 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_GetSessionInfo",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_SESSION_INFO,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_RV)(arg1)->C_GetSessionInfo(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_Login(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    unsigned long arg3 ;
    unsigned char *arg4 = (unsigned char *) 0 ;
    unsigned long arg5 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    char *buf4 ;
    size_t size4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_Login",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    arg3 = (unsigned long)SWIG_As_unsigned_SS_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        int res = SWIG_AsCharPtrAndSize(obj3, &buf4, &size4);
        if (!res) SWIG_fail;
        arg4 = (unsigned char *) buf4;
        arg5 = (unsigned long) size4 - 1;
    }
    result = (CK_RV)(arg1)->C_Login(arg2,arg3,arg4,arg5);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_Logout(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CPKCS11Lib_C_Logout",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    result = (CK_RV)(arg1)->C_Logout(arg2);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_CreateObject(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<CK_ATTRIBUTE_SMART > arg3 ;
    unsigned long *arg4 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_CreateObject",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<CK_ATTRIBUTE_SMART > *ptr = (std::vector<CK_ATTRIBUTE_SMART > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_unsigned_long,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_CreateObject(arg2,arg3,*arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_DestroyObject(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    unsigned long arg3 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_DestroyObject",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    arg3 = (unsigned long)SWIG_As_unsigned_SS_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (CK_RV)(arg1)->C_DestroyObject(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_GetObjectSize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    unsigned long arg3 ;
    unsigned long *arg4 = (unsigned long *) 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_GetObjectSize",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    arg3 = (unsigned long)SWIG_As_unsigned_SS_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_unsigned_long,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_RV)(arg1)->C_GetObjectSize(arg2,arg3,arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_GetAttributeValue(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    unsigned long arg3 ;
    std::vector<CK_ATTRIBUTE_SMART > *arg4 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_GetAttributeValue",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    arg3 = (unsigned long)SWIG_As_unsigned_SS_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_GetAttributeValue(arg2,arg3,*arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_SetAttributeValue(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    unsigned long arg3 ;
    std::vector<CK_ATTRIBUTE_SMART > arg4 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_SetAttributeValue",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    arg3 = (unsigned long)SWIG_As_unsigned_SS_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        std::vector<CK_ATTRIBUTE_SMART > *ptr = (std::vector<CK_ATTRIBUTE_SMART > *)0;
        int res = swigpy::asptr(obj3, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (CK_RV)(arg1)->C_SetAttributeValue(arg2,arg3,arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_FindObjectsInit(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<CK_ATTRIBUTE_SMART > *arg3 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_FindObjectsInit",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_vectorTCK_ATTRIBUTE_SMART_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_FindObjectsInit(arg2,*arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_FindObjects(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<int > *arg3 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_FindObjects",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_vectorTint_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_FindObjects(arg2,*arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_FindObjectsFinal(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CPKCS11Lib_C_FindObjectsFinal",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    result = (CK_RV)(arg1)->C_FindObjectsFinal(arg2);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_EncryptInit(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_MECHANISM *arg3 = (CK_MECHANISM *) 0 ;
    unsigned long arg4 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_EncryptInit",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg4 = (unsigned long)SWIG_As_unsigned_SS_long(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (CK_RV)(arg1)->C_EncryptInit(arg2,arg3,arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_Encrypt(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    std::vector<unsigned char > *arg4 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_Encrypt",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_Encrypt(arg2,arg3,*arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_EncryptUpdate(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    std::vector<unsigned char > *arg4 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_EncryptUpdate",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_EncryptUpdate(arg2,arg3,*arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_EncryptFinal(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > *arg3 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_EncryptFinal",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_EncryptFinal(arg2,*arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_DecryptInit(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_MECHANISM *arg3 = (CK_MECHANISM *) 0 ;
    unsigned long arg4 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_DecryptInit",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg4 = (unsigned long)SWIG_As_unsigned_SS_long(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (CK_RV)(arg1)->C_DecryptInit(arg2,arg3,arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_Decrypt(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    std::vector<unsigned char > *arg4 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_Decrypt",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_Decrypt(arg2,arg3,*arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_DecryptUpdate(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    std::vector<unsigned char > *arg4 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_DecryptUpdate",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_DecryptUpdate(arg2,arg3,*arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_DecryptFinal(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > *arg3 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_DecryptFinal",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_DecryptFinal(arg2,*arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_DigestInit(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_MECHANISM *arg3 = (CK_MECHANISM *) 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_DigestInit",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_RV)(arg1)->C_DigestInit(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_Digest(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    std::vector<unsigned char > *arg4 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_Digest",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_Digest(arg2,arg3,*arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_DigestUpdate(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_DigestUpdate",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (CK_RV)(arg1)->C_DigestUpdate(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_DigestKey(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    unsigned long arg3 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_DigestKey",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    arg3 = (unsigned long)SWIG_As_unsigned_SS_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (CK_RV)(arg1)->C_DigestKey(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_DigestFinal(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > *arg3 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_DigestFinal",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_DigestFinal(arg2,*arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_SignInit(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_MECHANISM *arg3 = (CK_MECHANISM *) 0 ;
    unsigned long arg4 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_SignInit",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg4 = (unsigned long)SWIG_As_unsigned_SS_long(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (CK_RV)(arg1)->C_SignInit(arg2,arg3,arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_Sign(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    std::vector<unsigned char > *arg4 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_Sign",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_Sign(arg2,arg3,*arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_SignUpdate(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_SignUpdate",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (CK_RV)(arg1)->C_SignUpdate(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_SignFinal(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > *arg3 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_SignFinal",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_SignFinal(arg2,*arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_VerifyInit(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_MECHANISM *arg3 = (CK_MECHANISM *) 0 ;
    unsigned long arg4 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_VerifyInit",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg4 = (unsigned long)SWIG_As_unsigned_SS_long(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    result = (CK_RV)(arg1)->C_VerifyInit(arg2,arg3,arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_Verify(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    std::vector<unsigned char > arg4 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CPKCS11Lib_C_Verify",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj3, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (CK_RV)(arg1)->C_Verify(arg2,arg3,arg4);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_VerifyUpdate(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_VerifyUpdate",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (CK_RV)(arg1)->C_VerifyUpdate(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_VerifyFinal(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_VerifyFinal",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (CK_RV)(arg1)->C_VerifyFinal(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_GenerateKey(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_MECHANISM *arg3 = (CK_MECHANISM *) 0 ;
    std::vector<CK_ATTRIBUTE_SMART > arg4 ;
    unsigned long *arg5 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:CPKCS11Lib_C_GenerateKey",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        std::vector<CK_ATTRIBUTE_SMART > *ptr = (std::vector<CK_ATTRIBUTE_SMART > *)0;
        int res = swigpy::asptr(obj3, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_p_unsigned_long,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg5 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_GenerateKey(arg2,arg3,arg4,*arg5);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_GenerateKeyPair(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_MECHANISM *arg3 = (CK_MECHANISM *) 0 ;
    std::vector<CK_ATTRIBUTE_SMART > arg4 ;
    std::vector<CK_ATTRIBUTE_SMART > arg5 ;
    unsigned long *arg6 = 0 ;
    unsigned long *arg7 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:CPKCS11Lib_C_GenerateKeyPair",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        std::vector<CK_ATTRIBUTE_SMART > *ptr = (std::vector<CK_ATTRIBUTE_SMART > *)0;
        int res = swigpy::asptr(obj3, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::vector<CK_ATTRIBUTE_SMART > *ptr = (std::vector<CK_ATTRIBUTE_SMART > *)0;
        int res = swigpy::asptr(obj4, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg5 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_unsigned_long,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg6 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if ((SWIG_ConvertPtr(obj6,(void **)(&arg7),SWIGTYPE_p_unsigned_long,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg7 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_GenerateKeyPair(arg2,arg3,arg4,arg5,*arg6,*arg7);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_WrapKey(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_MECHANISM *arg3 = (CK_MECHANISM *) 0 ;
    unsigned long arg4 ;
    unsigned long arg5 ;
    std::vector<unsigned char > *arg6 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:CPKCS11Lib_C_WrapKey",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg4 = (unsigned long)SWIG_As_unsigned_SS_long(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (unsigned long)SWIG_As_unsigned_SS_long(obj4); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),SWIGTYPE_p_vectorTunsigned_char_t,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg6 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_WrapKey(arg2,arg3,arg4,arg5,*arg6);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_UnwrapKey(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    CK_MECHANISM *arg3 = (CK_MECHANISM *) 0 ;
    unsigned long arg4 ;
    std::vector<unsigned char > arg5 ;
    std::vector<CK_ATTRIBUTE_SMART > arg6 ;
    unsigned long *arg7 = 0 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:CPKCS11Lib_C_UnwrapKey",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_CK_MECHANISM,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg4 = (unsigned long)SWIG_As_unsigned_SS_long(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj4, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg5 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::vector<CK_ATTRIBUTE_SMART > *ptr = (std::vector<CK_ATTRIBUTE_SMART > *)0;
        int res = swigpy::asptr(obj5, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg6 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    if ((SWIG_ConvertPtr(obj6,(void **)(&arg7),SWIGTYPE_p_unsigned_long,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg7 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    result = (CK_RV)(arg1)->C_UnwrapKey(arg2,arg3,arg4,arg5,arg6,*arg7);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_SeedRandom(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_SeedRandom",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (CK_RV)(arg1)->C_SeedRandom(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_GenerateRandom(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    CK_SESSION_HANDLE arg2 ;
    std::vector<unsigned char > arg3 ;
    CK_RV result;
    CK_SESSION_HANDLE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_GenerateRandom",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&argp2),SWIGTYPE_p_CK_SESSION_HANDLE,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2;
    {
        std::vector<unsigned char > *ptr = (std::vector<unsigned char > *)0;
        int res = swigpy::asptr(obj2, &ptr);
        if (!res || !ptr) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (CK_RV)(arg1)->C_GenerateRandom(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CPKCS11Lib_C_WaitForSlotEvent(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CPKCS11Lib *arg1 = (CPKCS11Lib *) 0 ;
    unsigned long arg2 ;
    unsigned long *arg3 = (unsigned long *) 0 ;
    CK_RV result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CPKCS11Lib_C_WaitForSlotEvent",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CPKCS11Lib,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_unsigned_long,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (CK_RV)(arg1)->C_WaitForSlotEvent(arg2,arg3);
    
    {
        resultobj = PyInt_FromLong((long)result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CPKCS11Lib_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CPKCS11Lib, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CK_ATTRIBUTE_SMART_Reset(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_ATTRIBUTE_SMART_Reset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->Reset();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_ResetValue(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_ATTRIBUTE_SMART_ResetValue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    (arg1)->ResetValue();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_Reserve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CK_ATTRIBUTE_SMART_Reserve",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (long)SWIG_As_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->Reserve(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_GetType(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_ATTRIBUTE_SMART_GetType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (unsigned long)((CK_ATTRIBUTE_SMART const *)arg1)->GetType();
    
    resultobj = SWIG_From_unsigned_SS_long((unsigned long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_SetType(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CK_ATTRIBUTE_SMART_SetType",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetType(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_GetLen(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_ATTRIBUTE_SMART_GetLen",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (int)((CK_ATTRIBUTE_SMART const *)arg1)->GetLen();
    
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_IsString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_ATTRIBUTE_SMART_IsString",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)((CK_ATTRIBUTE_SMART const *)arg1)->IsString();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_IsBool(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_ATTRIBUTE_SMART_IsBool",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)((CK_ATTRIBUTE_SMART const *)arg1)->IsBool();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_IsNum(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_ATTRIBUTE_SMART_IsNum",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)((CK_ATTRIBUTE_SMART const *)arg1)->IsNum();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_IsBin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_ATTRIBUTE_SMART_IsBin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)((CK_ATTRIBUTE_SMART const *)arg1)->IsBin();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_GetString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    PyKCS11String result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_ATTRIBUTE_SMART_GetString",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = ((CK_ATTRIBUTE_SMART const *)arg1)->GetString();
    
    {
        resultobj = PyString_FromStringAndSize((const char*)((&result)->m_str.c_str()),(int)((&result)->m_str.size()));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_SetString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    unsigned long arg2 ;
    char *arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CK_ATTRIBUTE_SMART_SetString",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) SWIG_fail;
    (arg1)->SetString(arg2,(char const *)arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_GetNum(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_ATTRIBUTE_SMART_GetNum",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (long)((CK_ATTRIBUTE_SMART const *)arg1)->GetNum();
    
    resultobj = SWIG_From_long((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_SetNum(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    unsigned long arg2 ;
    unsigned long arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CK_ATTRIBUTE_SMART_SetNum",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned long)SWIG_As_unsigned_SS_long(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetNum(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_GetBool(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_ATTRIBUTE_SMART_GetBool",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (bool)((CK_ATTRIBUTE_SMART const *)arg1)->GetBool();
    
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_SetBool(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    unsigned long arg2 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CK_ATTRIBUTE_SMART_SetBool",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (bool)SWIG_As_bool(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetBool(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_GetBin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    std::vector<unsigned char > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CK_ATTRIBUTE_SMART_GetBin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    result = (arg1)->GetBin();
    
    resultobj = swigpy::from((std::vector<unsigned char >)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CK_ATTRIBUTE_SMART_SetBin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    unsigned long arg2 ;
    std::vector<unsigned char > *arg3 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CK_ATTRIBUTE_SMART_SetBin",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (unsigned long)SWIG_As_unsigned_SS_long(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    if (!(res3 = swigpy::asptr(obj2, &arg3)) || !(arg3)) SWIG_fail;
    (arg1)->SetBin(arg2,(std::vector<unsigned char > const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_new_CK_ATTRIBUTE_SMART(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CK_ATTRIBUTE_SMART")) goto fail;
    result = (CK_ATTRIBUTE_SMART *)new CK_ATTRIBUTE_SMART();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CK_ATTRIBUTE_SMART, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CK_ATTRIBUTE_SMART(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CK_ATTRIBUTE_SMART *arg1 = (CK_ATTRIBUTE_SMART *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CK_ATTRIBUTE_SMART",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CK_ATTRIBUTE_SMART,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CK_ATTRIBUTE_SMART_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CK_ATTRIBUTE_SMART, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"cdata", _wrap_cdata, METH_VARARGS, NULL },
	 { (char *)"memmove", _wrap_memmove, METH_VARARGS, NULL },
	 { (char *)"ckintlist_empty", _wrap_ckintlist_empty, METH_VARARGS, NULL },
	 { (char *)"ckintlist_size", _wrap_ckintlist_size, METH_VARARGS, NULL },
	 { (char *)"ckintlist_clear", _wrap_ckintlist_clear, METH_VARARGS, NULL },
	 { (char *)"ckintlist_swap", _wrap_ckintlist_swap, METH_VARARGS, NULL },
	 { (char *)"ckintlist_pop_back", _wrap_ckintlist_pop_back, METH_VARARGS, NULL },
	 { (char *)"new_ckintlist", _wrap_new_ckintlist, METH_VARARGS, NULL },
	 { (char *)"ckintlist_push_back", _wrap_ckintlist_push_back, METH_VARARGS, NULL },
	 { (char *)"ckintlist_front", _wrap_ckintlist_front, METH_VARARGS, NULL },
	 { (char *)"ckintlist_back", _wrap_ckintlist_back, METH_VARARGS, NULL },
	 { (char *)"ckintlist_assign", _wrap_ckintlist_assign, METH_VARARGS, NULL },
	 { (char *)"ckintlist_resize", _wrap_ckintlist_resize, METH_VARARGS, NULL },
	 { (char *)"ckintlist_reserve", _wrap_ckintlist_reserve, METH_VARARGS, NULL },
	 { (char *)"ckintlist_capacity", _wrap_ckintlist_capacity, METH_VARARGS, NULL },
	 { (char *)"ckintlist___nonzero__", _wrap_ckintlist___nonzero__, METH_VARARGS, NULL },
	 { (char *)"ckintlist___len__", _wrap_ckintlist___len__, METH_VARARGS, NULL },
	 { (char *)"ckintlist_pop", _wrap_ckintlist_pop, METH_VARARGS, NULL },
	 { (char *)"ckintlist___getslice__", _wrap_ckintlist___getslice__, METH_VARARGS, NULL },
	 { (char *)"ckintlist___setslice__", _wrap_ckintlist___setslice__, METH_VARARGS, NULL },
	 { (char *)"ckintlist___delslice__", _wrap_ckintlist___delslice__, METH_VARARGS, NULL },
	 { (char *)"ckintlist___delitem__", _wrap_ckintlist___delitem__, METH_VARARGS, NULL },
	 { (char *)"ckintlist___getitem__", _wrap_ckintlist___getitem__, METH_VARARGS, NULL },
	 { (char *)"ckintlist___setitem__", _wrap_ckintlist___setitem__, METH_VARARGS, NULL },
	 { (char *)"ckintlist_append", _wrap_ckintlist_append, METH_VARARGS, NULL },
	 { (char *)"delete_ckintlist", _wrap_delete_ckintlist, METH_VARARGS, NULL },
	 { (char *)"ckintlist_swigregister", ckintlist_swigregister, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_empty", _wrap_ckbytelist_empty, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_size", _wrap_ckbytelist_size, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_clear", _wrap_ckbytelist_clear, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_swap", _wrap_ckbytelist_swap, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_pop_back", _wrap_ckbytelist_pop_back, METH_VARARGS, NULL },
	 { (char *)"new_ckbytelist", _wrap_new_ckbytelist, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_push_back", _wrap_ckbytelist_push_back, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_front", _wrap_ckbytelist_front, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_back", _wrap_ckbytelist_back, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_assign", _wrap_ckbytelist_assign, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_resize", _wrap_ckbytelist_resize, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_reserve", _wrap_ckbytelist_reserve, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_capacity", _wrap_ckbytelist_capacity, METH_VARARGS, NULL },
	 { (char *)"ckbytelist___nonzero__", _wrap_ckbytelist___nonzero__, METH_VARARGS, NULL },
	 { (char *)"ckbytelist___len__", _wrap_ckbytelist___len__, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_pop", _wrap_ckbytelist_pop, METH_VARARGS, NULL },
	 { (char *)"ckbytelist___getslice__", _wrap_ckbytelist___getslice__, METH_VARARGS, NULL },
	 { (char *)"ckbytelist___setslice__", _wrap_ckbytelist___setslice__, METH_VARARGS, NULL },
	 { (char *)"ckbytelist___delslice__", _wrap_ckbytelist___delslice__, METH_VARARGS, NULL },
	 { (char *)"ckbytelist___delitem__", _wrap_ckbytelist___delitem__, METH_VARARGS, NULL },
	 { (char *)"ckbytelist___getitem__", _wrap_ckbytelist___getitem__, METH_VARARGS, NULL },
	 { (char *)"ckbytelist___setitem__", _wrap_ckbytelist___setitem__, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_append", _wrap_ckbytelist_append, METH_VARARGS, NULL },
	 { (char *)"delete_ckbytelist", _wrap_delete_ckbytelist, METH_VARARGS, NULL },
	 { (char *)"ckbytelist_swigregister", ckbytelist_swigregister, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_empty", _wrap_ckattrlist_empty, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_size", _wrap_ckattrlist_size, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_clear", _wrap_ckattrlist_clear, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_swap", _wrap_ckattrlist_swap, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_pop_back", _wrap_ckattrlist_pop_back, METH_VARARGS, NULL },
	 { (char *)"new_ckattrlist", _wrap_new_ckattrlist, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_push_back", _wrap_ckattrlist_push_back, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_front", _wrap_ckattrlist_front, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_back", _wrap_ckattrlist_back, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_assign", _wrap_ckattrlist_assign, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_resize", _wrap_ckattrlist_resize, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_reserve", _wrap_ckattrlist_reserve, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_capacity", _wrap_ckattrlist_capacity, METH_VARARGS, NULL },
	 { (char *)"ckattrlist___nonzero__", _wrap_ckattrlist___nonzero__, METH_VARARGS, NULL },
	 { (char *)"ckattrlist___len__", _wrap_ckattrlist___len__, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_pop", _wrap_ckattrlist_pop, METH_VARARGS, NULL },
	 { (char *)"ckattrlist___getslice__", _wrap_ckattrlist___getslice__, METH_VARARGS, NULL },
	 { (char *)"ckattrlist___setslice__", _wrap_ckattrlist___setslice__, METH_VARARGS, NULL },
	 { (char *)"ckattrlist___delslice__", _wrap_ckattrlist___delslice__, METH_VARARGS, NULL },
	 { (char *)"ckattrlist___delitem__", _wrap_ckattrlist___delitem__, METH_VARARGS, NULL },
	 { (char *)"ckattrlist___getitem__", _wrap_ckattrlist___getitem__, METH_VARARGS, NULL },
	 { (char *)"ckattrlist___setitem__", _wrap_ckattrlist___setitem__, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_append", _wrap_ckattrlist_append, METH_VARARGS, NULL },
	 { (char *)"delete_ckattrlist", _wrap_delete_ckattrlist, METH_VARARGS, NULL },
	 { (char *)"ckattrlist_swigregister", ckattrlist_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_CK_SESSION_HANDLE", _wrap_new_CK_SESSION_HANDLE, METH_VARARGS, NULL },
	 { (char *)"delete_CK_SESSION_HANDLE", _wrap_delete_CK_SESSION_HANDLE, METH_VARARGS, NULL },
	 { (char *)"CK_SESSION_HANDLE_assign", _wrap_CK_SESSION_HANDLE_assign, METH_VARARGS, NULL },
	 { (char *)"CK_SESSION_HANDLE_value", _wrap_CK_SESSION_HANDLE_value, METH_VARARGS, NULL },
	 { (char *)"CK_SESSION_HANDLE_cast", _wrap_CK_SESSION_HANDLE_cast, METH_VARARGS, NULL },
	 { (char *)"CK_SESSION_HANDLE_frompointer", _wrap_CK_SESSION_HANDLE_frompointer, METH_VARARGS, NULL },
	 { (char *)"CK_SESSION_HANDLE_swigregister", CK_SESSION_HANDLE_swigregister, METH_VARARGS, NULL },
	 { (char *)"CK_VERSION_major_get", _wrap_CK_VERSION_major_get, METH_VARARGS, NULL },
	 { (char *)"CK_VERSION_minor_get", _wrap_CK_VERSION_minor_get, METH_VARARGS, NULL },
	 { (char *)"new_CK_VERSION", _wrap_new_CK_VERSION, METH_VARARGS, NULL },
	 { (char *)"delete_CK_VERSION", _wrap_delete_CK_VERSION, METH_VARARGS, NULL },
	 { (char *)"CK_VERSION_swigregister", CK_VERSION_swigregister, METH_VARARGS, NULL },
	 { (char *)"CK_INFO_cryptokiVersion_get", _wrap_CK_INFO_cryptokiVersion_get, METH_VARARGS, NULL },
	 { (char *)"CK_INFO_manufacturerID_get", _wrap_CK_INFO_manufacturerID_get, METH_VARARGS, NULL },
	 { (char *)"CK_INFO_flags_get", _wrap_CK_INFO_flags_get, METH_VARARGS, NULL },
	 { (char *)"CK_INFO_libraryDescription_get", _wrap_CK_INFO_libraryDescription_get, METH_VARARGS, NULL },
	 { (char *)"CK_INFO_libraryVersion_get", _wrap_CK_INFO_libraryVersion_get, METH_VARARGS, NULL },
	 { (char *)"CK_INFO_GetManufacturerID", _wrap_CK_INFO_GetManufacturerID, METH_VARARGS, NULL },
	 { (char *)"CK_INFO_GetLibraryDescription", _wrap_CK_INFO_GetLibraryDescription, METH_VARARGS, NULL },
	 { (char *)"CK_INFO_GetLibraryVersion", _wrap_CK_INFO_GetLibraryVersion, METH_VARARGS, NULL },
	 { (char *)"new_CK_INFO", _wrap_new_CK_INFO, METH_VARARGS, NULL },
	 { (char *)"delete_CK_INFO", _wrap_delete_CK_INFO, METH_VARARGS, NULL },
	 { (char *)"CK_INFO_swigregister", CK_INFO_swigregister, METH_VARARGS, NULL },
	 { (char *)"CK_SLOT_INFO_flags_get", _wrap_CK_SLOT_INFO_flags_get, METH_VARARGS, NULL },
	 { (char *)"CK_SLOT_INFO_hardwareVersion_get", _wrap_CK_SLOT_INFO_hardwareVersion_get, METH_VARARGS, NULL },
	 { (char *)"CK_SLOT_INFO_firmwareVersion_get", _wrap_CK_SLOT_INFO_firmwareVersion_get, METH_VARARGS, NULL },
	 { (char *)"CK_SLOT_INFO_GetManufacturerID", _wrap_CK_SLOT_INFO_GetManufacturerID, METH_VARARGS, NULL },
	 { (char *)"CK_SLOT_INFO_GetSlotDescription", _wrap_CK_SLOT_INFO_GetSlotDescription, METH_VARARGS, NULL },
	 { (char *)"CK_SLOT_INFO_GetHardwareVersion", _wrap_CK_SLOT_INFO_GetHardwareVersion, METH_VARARGS, NULL },
	 { (char *)"CK_SLOT_INFO_GetFirmwareVersion", _wrap_CK_SLOT_INFO_GetFirmwareVersion, METH_VARARGS, NULL },
	 { (char *)"new_CK_SLOT_INFO", _wrap_new_CK_SLOT_INFO, METH_VARARGS, NULL },
	 { (char *)"delete_CK_SLOT_INFO", _wrap_delete_CK_SLOT_INFO, METH_VARARGS, NULL },
	 { (char *)"CK_SLOT_INFO_swigregister", CK_SLOT_INFO_swigregister, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_flags_get", _wrap_CK_TOKEN_INFO_flags_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_ulMaxSessionCount_get", _wrap_CK_TOKEN_INFO_ulMaxSessionCount_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_ulSessionCount_get", _wrap_CK_TOKEN_INFO_ulSessionCount_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_ulMaxRwSessionCount_get", _wrap_CK_TOKEN_INFO_ulMaxRwSessionCount_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_ulRwSessionCount_get", _wrap_CK_TOKEN_INFO_ulRwSessionCount_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_ulMaxPinLen_get", _wrap_CK_TOKEN_INFO_ulMaxPinLen_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_ulMinPinLen_get", _wrap_CK_TOKEN_INFO_ulMinPinLen_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_ulTotalPublicMemory_get", _wrap_CK_TOKEN_INFO_ulTotalPublicMemory_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_ulFreePublicMemory_get", _wrap_CK_TOKEN_INFO_ulFreePublicMemory_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_ulTotalPrivateMemory_get", _wrap_CK_TOKEN_INFO_ulTotalPrivateMemory_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_ulFreePrivateMemory_get", _wrap_CK_TOKEN_INFO_ulFreePrivateMemory_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_hardwareVersion_get", _wrap_CK_TOKEN_INFO_hardwareVersion_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_firmwareVersion_get", _wrap_CK_TOKEN_INFO_firmwareVersion_get, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_GetLabel", _wrap_CK_TOKEN_INFO_GetLabel, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_GetManufacturerID", _wrap_CK_TOKEN_INFO_GetManufacturerID, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_GetModel", _wrap_CK_TOKEN_INFO_GetModel, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_GetSerialNumber", _wrap_CK_TOKEN_INFO_GetSerialNumber, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_GetFirmwareVersion", _wrap_CK_TOKEN_INFO_GetFirmwareVersion, METH_VARARGS, NULL },
	 { (char *)"new_CK_TOKEN_INFO", _wrap_new_CK_TOKEN_INFO, METH_VARARGS, NULL },
	 { (char *)"delete_CK_TOKEN_INFO", _wrap_delete_CK_TOKEN_INFO, METH_VARARGS, NULL },
	 { (char *)"CK_TOKEN_INFO_swigregister", CK_TOKEN_INFO_swigregister, METH_VARARGS, NULL },
	 { (char *)"CK_SESSION_INFO_slotID_get", _wrap_CK_SESSION_INFO_slotID_get, METH_VARARGS, NULL },
	 { (char *)"CK_SESSION_INFO_state_get", _wrap_CK_SESSION_INFO_state_get, METH_VARARGS, NULL },
	 { (char *)"CK_SESSION_INFO_flags_get", _wrap_CK_SESSION_INFO_flags_get, METH_VARARGS, NULL },
	 { (char *)"CK_SESSION_INFO_ulDeviceError_get", _wrap_CK_SESSION_INFO_ulDeviceError_get, METH_VARARGS, NULL },
	 { (char *)"new_CK_SESSION_INFO", _wrap_new_CK_SESSION_INFO, METH_VARARGS, NULL },
	 { (char *)"delete_CK_SESSION_INFO", _wrap_delete_CK_SESSION_INFO, METH_VARARGS, NULL },
	 { (char *)"CK_SESSION_INFO_swigregister", CK_SESSION_INFO_swigregister, METH_VARARGS, NULL },
	 { (char *)"CK_DATE_GetYear", _wrap_CK_DATE_GetYear, METH_VARARGS, NULL },
	 { (char *)"CK_DATE_GetMonth", _wrap_CK_DATE_GetMonth, METH_VARARGS, NULL },
	 { (char *)"CK_DATE_GetDay", _wrap_CK_DATE_GetDay, METH_VARARGS, NULL },
	 { (char *)"new_CK_DATE", _wrap_new_CK_DATE, METH_VARARGS, NULL },
	 { (char *)"delete_CK_DATE", _wrap_delete_CK_DATE, METH_VARARGS, NULL },
	 { (char *)"CK_DATE_swigregister", CK_DATE_swigregister, METH_VARARGS, NULL },
	 { (char *)"CK_MECHANISM_mechanism_set", _wrap_CK_MECHANISM_mechanism_set, METH_VARARGS, NULL },
	 { (char *)"CK_MECHANISM_mechanism_get", _wrap_CK_MECHANISM_mechanism_get, METH_VARARGS, NULL },
	 { (char *)"CK_MECHANISM_pParameter_set", _wrap_CK_MECHANISM_pParameter_set, METH_VARARGS, NULL },
	 { (char *)"CK_MECHANISM_pParameter_get", _wrap_CK_MECHANISM_pParameter_get, METH_VARARGS, NULL },
	 { (char *)"CK_MECHANISM_ulParameterLen_set", _wrap_CK_MECHANISM_ulParameterLen_set, METH_VARARGS, NULL },
	 { (char *)"CK_MECHANISM_ulParameterLen_get", _wrap_CK_MECHANISM_ulParameterLen_get, METH_VARARGS, NULL },
	 { (char *)"new_CK_MECHANISM", _wrap_new_CK_MECHANISM, METH_VARARGS, NULL },
	 { (char *)"delete_CK_MECHANISM", _wrap_delete_CK_MECHANISM, METH_VARARGS, NULL },
	 { (char *)"CK_MECHANISM_swigregister", CK_MECHANISM_swigregister, METH_VARARGS, NULL },
	 { (char *)"CK_MECHANISM_INFO_ulMinKeySize_get", _wrap_CK_MECHANISM_INFO_ulMinKeySize_get, METH_VARARGS, NULL },
	 { (char *)"CK_MECHANISM_INFO_ulMaxKeySize_get", _wrap_CK_MECHANISM_INFO_ulMaxKeySize_get, METH_VARARGS, NULL },
	 { (char *)"CK_MECHANISM_INFO_flags_get", _wrap_CK_MECHANISM_INFO_flags_get, METH_VARARGS, NULL },
	 { (char *)"new_CK_MECHANISM_INFO", _wrap_new_CK_MECHANISM_INFO, METH_VARARGS, NULL },
	 { (char *)"delete_CK_MECHANISM_INFO", _wrap_delete_CK_MECHANISM_INFO, METH_VARARGS, NULL },
	 { (char *)"CK_MECHANISM_INFO_swigregister", CK_MECHANISM_INFO_swigregister, METH_VARARGS, NULL },
	 { (char *)"new_CPKCS11Lib", _wrap_new_CPKCS11Lib, METH_VARARGS, NULL },
	 { (char *)"delete_CPKCS11Lib", _wrap_delete_CPKCS11Lib, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_Load", _wrap_CPKCS11Lib_Load, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_Unload", _wrap_CPKCS11Lib_Unload, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_Initialize", _wrap_CPKCS11Lib_C_Initialize, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_Finalize", _wrap_CPKCS11Lib_C_Finalize, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_GetInfo", _wrap_CPKCS11Lib_C_GetInfo, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_GetSlotList", _wrap_CPKCS11Lib_C_GetSlotList, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_GetSlotInfo", _wrap_CPKCS11Lib_C_GetSlotInfo, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_GetTokenInfo", _wrap_CPKCS11Lib_C_GetTokenInfo, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_InitToken", _wrap_CPKCS11Lib_C_InitToken, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_InitPIN", _wrap_CPKCS11Lib_C_InitPIN, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_SetPIN", _wrap_CPKCS11Lib_C_SetPIN, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_OpenSession", _wrap_CPKCS11Lib_C_OpenSession, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_CloseSession", _wrap_CPKCS11Lib_C_CloseSession, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_CloseAllSessions", _wrap_CPKCS11Lib_C_CloseAllSessions, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_GetSessionInfo", _wrap_CPKCS11Lib_C_GetSessionInfo, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_Login", _wrap_CPKCS11Lib_C_Login, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_Logout", _wrap_CPKCS11Lib_C_Logout, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_CreateObject", _wrap_CPKCS11Lib_C_CreateObject, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_DestroyObject", _wrap_CPKCS11Lib_C_DestroyObject, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_GetObjectSize", _wrap_CPKCS11Lib_C_GetObjectSize, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_GetAttributeValue", _wrap_CPKCS11Lib_C_GetAttributeValue, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_SetAttributeValue", _wrap_CPKCS11Lib_C_SetAttributeValue, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_FindObjectsInit", _wrap_CPKCS11Lib_C_FindObjectsInit, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_FindObjects", _wrap_CPKCS11Lib_C_FindObjects, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_FindObjectsFinal", _wrap_CPKCS11Lib_C_FindObjectsFinal, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_EncryptInit", _wrap_CPKCS11Lib_C_EncryptInit, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_Encrypt", _wrap_CPKCS11Lib_C_Encrypt, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_EncryptUpdate", _wrap_CPKCS11Lib_C_EncryptUpdate, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_EncryptFinal", _wrap_CPKCS11Lib_C_EncryptFinal, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_DecryptInit", _wrap_CPKCS11Lib_C_DecryptInit, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_Decrypt", _wrap_CPKCS11Lib_C_Decrypt, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_DecryptUpdate", _wrap_CPKCS11Lib_C_DecryptUpdate, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_DecryptFinal", _wrap_CPKCS11Lib_C_DecryptFinal, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_DigestInit", _wrap_CPKCS11Lib_C_DigestInit, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_Digest", _wrap_CPKCS11Lib_C_Digest, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_DigestUpdate", _wrap_CPKCS11Lib_C_DigestUpdate, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_DigestKey", _wrap_CPKCS11Lib_C_DigestKey, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_DigestFinal", _wrap_CPKCS11Lib_C_DigestFinal, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_SignInit", _wrap_CPKCS11Lib_C_SignInit, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_Sign", _wrap_CPKCS11Lib_C_Sign, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_SignUpdate", _wrap_CPKCS11Lib_C_SignUpdate, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_SignFinal", _wrap_CPKCS11Lib_C_SignFinal, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_VerifyInit", _wrap_CPKCS11Lib_C_VerifyInit, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_Verify", _wrap_CPKCS11Lib_C_Verify, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_VerifyUpdate", _wrap_CPKCS11Lib_C_VerifyUpdate, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_VerifyFinal", _wrap_CPKCS11Lib_C_VerifyFinal, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_GenerateKey", _wrap_CPKCS11Lib_C_GenerateKey, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_GenerateKeyPair", _wrap_CPKCS11Lib_C_GenerateKeyPair, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_WrapKey", _wrap_CPKCS11Lib_C_WrapKey, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_UnwrapKey", _wrap_CPKCS11Lib_C_UnwrapKey, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_SeedRandom", _wrap_CPKCS11Lib_C_SeedRandom, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_GenerateRandom", _wrap_CPKCS11Lib_C_GenerateRandom, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_C_WaitForSlotEvent", _wrap_CPKCS11Lib_C_WaitForSlotEvent, METH_VARARGS, NULL },
	 { (char *)"CPKCS11Lib_swigregister", CPKCS11Lib_swigregister, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_Reset", _wrap_CK_ATTRIBUTE_SMART_Reset, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_ResetValue", _wrap_CK_ATTRIBUTE_SMART_ResetValue, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_Reserve", _wrap_CK_ATTRIBUTE_SMART_Reserve, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_GetType", _wrap_CK_ATTRIBUTE_SMART_GetType, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_SetType", _wrap_CK_ATTRIBUTE_SMART_SetType, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_GetLen", _wrap_CK_ATTRIBUTE_SMART_GetLen, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_IsString", _wrap_CK_ATTRIBUTE_SMART_IsString, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_IsBool", _wrap_CK_ATTRIBUTE_SMART_IsBool, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_IsNum", _wrap_CK_ATTRIBUTE_SMART_IsNum, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_IsBin", _wrap_CK_ATTRIBUTE_SMART_IsBin, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_GetString", _wrap_CK_ATTRIBUTE_SMART_GetString, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_SetString", _wrap_CK_ATTRIBUTE_SMART_SetString, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_GetNum", _wrap_CK_ATTRIBUTE_SMART_GetNum, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_SetNum", _wrap_CK_ATTRIBUTE_SMART_SetNum, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_GetBool", _wrap_CK_ATTRIBUTE_SMART_GetBool, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_SetBool", _wrap_CK_ATTRIBUTE_SMART_SetBool, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_GetBin", _wrap_CK_ATTRIBUTE_SMART_GetBin, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_SetBin", _wrap_CK_ATTRIBUTE_SMART_SetBin, METH_VARARGS, NULL },
	 { (char *)"new_CK_ATTRIBUTE_SMART", _wrap_new_CK_ATTRIBUTE_SMART, METH_VARARGS, NULL },
	 { (char *)"delete_CK_ATTRIBUTE_SMART", _wrap_delete_CK_ATTRIBUTE_SMART, METH_VARARGS, NULL },
	 { (char *)"CK_ATTRIBUTE_SMART_swigregister", CK_ATTRIBUTE_SMART_swigregister, METH_VARARGS, NULL },
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CK_SESSION_HANDLETo_p_CK_SESSION_HANDLE(void *x) {
    return (void *)((CK_SESSION_HANDLE *)  ((CK_SESSION_HANDLE *) x));
}
static swig_type_info _swigt__p_vectorTunsigned_char_t[] = {{"_p_vectorTunsigned_char_t", 0, "vector<unsigned char > *|std::vector<unsigned char > *", 0, 0, 0, 0},{"_p_vectorTunsigned_char_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_char[] = {{"_p_unsigned_char", 0, "unsigned char *", 0, 0, 0, 0},{"_p_unsigned_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CK_MECHANISM[] = {{"_p_CK_MECHANISM", 0, "CK_MECHANISM *", 0, 0, 0, 0},{"_p_CK_MECHANISM", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CK_MECHANISM_INFO[] = {{"_p_CK_MECHANISM_INFO", 0, "CK_MECHANISM_INFO *", 0, 0, 0, 0},{"_p_CK_MECHANISM_INFO", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CK_VERSION[] = {{"_p_CK_VERSION", 0, "CK_VERSION *", 0, 0, 0, 0},{"_p_CK_VERSION", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CK_SESSION_INFO[] = {{"_p_CK_SESSION_INFO", 0, "CK_SESSION_INFO *", 0, 0, 0, 0},{"_p_CK_SESSION_INFO", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CK_TOKEN_INFO[] = {{"_p_CK_TOKEN_INFO", 0, "CK_TOKEN_INFO *", 0, 0, 0, 0},{"_p_CK_TOKEN_INFO", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_vectorTCK_ATTRIBUTE_SMART_t[] = {{"_p_vectorTCK_ATTRIBUTE_SMART_t", 0, "vector<CK_ATTRIBUTE_SMART > *|std::vector<CK_ATTRIBUTE_SMART > *", 0, 0, 0, 0},{"_p_vectorTCK_ATTRIBUTE_SMART_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CK_SESSION_HANDLE[] = {{"_p_CK_SESSION_HANDLE", 0, "CK_SESSION_HANDLE *", 0, 0, 0, 0},{"_p_CK_SESSION_HANDLE", _p_CK_SESSION_HANDLETo_p_CK_SESSION_HANDLE, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_long[] = {{"_p_unsigned_long", 0, "unsigned long *", 0, 0, 0, 0},{"_p_unsigned_long", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CK_ATTRIBUTE_SMART[] = {{"_p_CK_ATTRIBUTE_SMART", 0, "CK_ATTRIBUTE_SMART *", 0, 0, 0, 0},{"_p_CK_ATTRIBUTE_SMART", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_vectorTint_t[] = {{"_p_vectorTint_t", 0, "vector<int > *|std::vector<int > *", 0, 0, 0, 0},{"_p_vectorTint_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CPKCS11Lib[] = {{"_p_CPKCS11Lib", 0, "CPKCS11Lib *", 0, 0, 0, 0},{"_p_CPKCS11Lib", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_void[] = {{"_p_void", 0, "void *", 0, 0, 0, 0},{"_p_void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0, 0, 0, 0},{"_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CK_INFO[] = {{"_p_CK_INFO", 0, "CK_INFO *", 0, 0, 0, 0},{"_p_CK_INFO", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CK_DATE[] = {{"_p_CK_DATE", 0, "CK_DATE *", 0, 0, 0, 0},{"_p_CK_DATE", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CK_SLOT_INFO[] = {{"_p_CK_SLOT_INFO", 0, "CK_SLOT_INFO *", 0, 0, 0, 0},{"_p_CK_SLOT_INFO", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_vectorTunsigned_char_t, 
_swigt__p_unsigned_char, 
_swigt__p_CK_MECHANISM, 
_swigt__p_CK_MECHANISM_INFO, 
_swigt__p_CK_VERSION, 
_swigt__p_CK_SESSION_INFO, 
_swigt__p_CK_TOKEN_INFO, 
_swigt__p_vectorTCK_ATTRIBUTE_SMART_t, 
_swigt__p_CK_SESSION_HANDLE, 
_swigt__p_unsigned_long, 
_swigt__p_CK_ATTRIBUTE_SMART, 
_swigt__p_vectorTint_t, 
_swigt__p_CPKCS11Lib, 
_swigt__p_void, 
_swigt__p_char, 
_swigt__p_CK_INFO, 
_swigt__p_CK_DATE, 
_swigt__p_CK_SLOT_INFO, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,"FALSE", SWIG_From_int((int)0));
    PyDict_SetItemString(d,"TRUE", SWIG_From_int((int)!(0)));
    PyDict_SetItemString(d,"CK_TRUE", SWIG_From_int((int)1));
    PyDict_SetItemString(d,"CK_FALSE", SWIG_From_int((int)0));
    PyDict_SetItemString(d,"CK_UNAVAILABLE_INFORMATION", SWIG_From_unsigned_SS_long((unsigned long)(~0UL)));
    PyDict_SetItemString(d,"CK_EFFECTIVELY_INFINITE", SWIG_From_int((int)0));
    PyDict_SetItemString(d,"CK_INVALID_HANDLE", SWIG_From_int((int)0));
    PyDict_SetItemString(d,"CKN_SURRENDER", SWIG_From_int((int)0));
    PyDict_SetItemString(d,"CKF_TOKEN_PRESENT", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKF_REMOVABLE_DEVICE", SWIG_From_int((int)0x00000002));
    PyDict_SetItemString(d,"CKF_HW_SLOT", SWIG_From_int((int)0x00000004));
    PyDict_SetItemString(d,"CKF_RNG", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKF_WRITE_PROTECTED", SWIG_From_int((int)0x00000002));
    PyDict_SetItemString(d,"CKF_LOGIN_REQUIRED", SWIG_From_int((int)0x00000004));
    PyDict_SetItemString(d,"CKF_USER_PIN_INITIALIZED", SWIG_From_int((int)0x00000008));
    PyDict_SetItemString(d,"CKF_RESTORE_KEY_NOT_NEEDED", SWIG_From_int((int)0x00000020));
    PyDict_SetItemString(d,"CKF_CLOCK_ON_TOKEN", SWIG_From_int((int)0x00000040));
    PyDict_SetItemString(d,"CKF_PROTECTED_AUTHENTICATION_PATH", SWIG_From_int((int)0x00000100));
    PyDict_SetItemString(d,"CKF_DUAL_CRYPTO_OPERATIONS", SWIG_From_int((int)0x00000200));
    PyDict_SetItemString(d,"CKF_TOKEN_INITIALIZED", SWIG_From_int((int)0x00000400));
    PyDict_SetItemString(d,"CKF_SECONDARY_AUTHENTICATION", SWIG_From_int((int)0x00000800));
    PyDict_SetItemString(d,"CKF_USER_PIN_COUNT_LOW", SWIG_From_int((int)0x00010000));
    PyDict_SetItemString(d,"CKF_USER_PIN_FINAL_TRY", SWIG_From_int((int)0x00020000));
    PyDict_SetItemString(d,"CKF_USER_PIN_LOCKED", SWIG_From_int((int)0x00040000));
    PyDict_SetItemString(d,"CKF_USER_PIN_TO_BE_CHANGED", SWIG_From_int((int)0x00080000));
    PyDict_SetItemString(d,"CKF_SO_PIN_COUNT_LOW", SWIG_From_int((int)0x00100000));
    PyDict_SetItemString(d,"CKF_SO_PIN_FINAL_TRY", SWIG_From_int((int)0x00200000));
    PyDict_SetItemString(d,"CKF_SO_PIN_LOCKED", SWIG_From_int((int)0x00400000));
    PyDict_SetItemString(d,"CKF_SO_PIN_TO_BE_CHANGED", SWIG_From_int((int)0x00800000));
    PyDict_SetItemString(d,"CKU_SO", SWIG_From_int((int)0));
    PyDict_SetItemString(d,"CKU_USER", SWIG_From_int((int)1));
    PyDict_SetItemString(d,"CKS_RO_PUBLIC_SESSION", SWIG_From_int((int)0));
    PyDict_SetItemString(d,"CKS_RO_USER_FUNCTIONS", SWIG_From_int((int)1));
    PyDict_SetItemString(d,"CKS_RW_PUBLIC_SESSION", SWIG_From_int((int)2));
    PyDict_SetItemString(d,"CKS_RW_USER_FUNCTIONS", SWIG_From_int((int)3));
    PyDict_SetItemString(d,"CKS_RW_SO_FUNCTIONS", SWIG_From_int((int)4));
    PyDict_SetItemString(d,"CKF_RW_SESSION", SWIG_From_int((int)0x00000002));
    PyDict_SetItemString(d,"CKF_SERIAL_SESSION", SWIG_From_int((int)0x00000004));
    PyDict_SetItemString(d,"CKO_DATA", SWIG_From_int((int)0x00000000));
    PyDict_SetItemString(d,"CKO_CERTIFICATE", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKO_PUBLIC_KEY", SWIG_From_int((int)0x00000002));
    PyDict_SetItemString(d,"CKO_PRIVATE_KEY", SWIG_From_int((int)0x00000003));
    PyDict_SetItemString(d,"CKO_SECRET_KEY", SWIG_From_int((int)0x00000004));
    PyDict_SetItemString(d,"CKO_HW_FEATURE", SWIG_From_int((int)0x00000005));
    PyDict_SetItemString(d,"CKO_DOMAIN_PARAMETERS", SWIG_From_int((int)0x00000006));
    PyDict_SetItemString(d,"CKO_VENDOR_DEFINED", SWIG_From_int((int)0x80000000));
    PyDict_SetItemString(d,"CKH_MONOTONIC_COUNTER", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKH_CLOCK", SWIG_From_int((int)0x00000002));
    PyDict_SetItemString(d,"CKH_VENDOR_DEFINED", SWIG_From_int((int)0x80000000));
    PyDict_SetItemString(d,"CKK_RSA", SWIG_From_int((int)0x00000000));
    PyDict_SetItemString(d,"CKK_DSA", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKK_DH", SWIG_From_int((int)0x00000002));
    PyDict_SetItemString(d,"CKK_ECDSA", SWIG_From_int((int)0x00000003));
    PyDict_SetItemString(d,"CKK_EC", SWIG_From_int((int)0x00000003));
    PyDict_SetItemString(d,"CKK_X9_42_DH", SWIG_From_int((int)0x00000004));
    PyDict_SetItemString(d,"CKK_KEA", SWIG_From_int((int)0x00000005));
    PyDict_SetItemString(d,"CKK_GENERIC_SECRET", SWIG_From_int((int)0x00000010));
    PyDict_SetItemString(d,"CKK_RC2", SWIG_From_int((int)0x00000011));
    PyDict_SetItemString(d,"CKK_RC4", SWIG_From_int((int)0x00000012));
    PyDict_SetItemString(d,"CKK_DES", SWIG_From_int((int)0x00000013));
    PyDict_SetItemString(d,"CKK_DES2", SWIG_From_int((int)0x00000014));
    PyDict_SetItemString(d,"CKK_DES3", SWIG_From_int((int)0x00000015));
    PyDict_SetItemString(d,"CKK_CAST", SWIG_From_int((int)0x00000016));
    PyDict_SetItemString(d,"CKK_CAST3", SWIG_From_int((int)0x00000017));
    PyDict_SetItemString(d,"CKK_CAST5", SWIG_From_int((int)0x00000018));
    PyDict_SetItemString(d,"CKK_CAST128", SWIG_From_int((int)0x00000018));
    PyDict_SetItemString(d,"CKK_RC5", SWIG_From_int((int)0x00000019));
    PyDict_SetItemString(d,"CKK_IDEA", SWIG_From_int((int)0x0000001A));
    PyDict_SetItemString(d,"CKK_SKIPJACK", SWIG_From_int((int)0x0000001B));
    PyDict_SetItemString(d,"CKK_BATON", SWIG_From_int((int)0x0000001C));
    PyDict_SetItemString(d,"CKK_JUNIPER", SWIG_From_int((int)0x0000001D));
    PyDict_SetItemString(d,"CKK_CDMF", SWIG_From_int((int)0x0000001E));
    PyDict_SetItemString(d,"CKK_AES", SWIG_From_int((int)0x0000001F));
    PyDict_SetItemString(d,"CKK_VENDOR_DEFINED", SWIG_From_int((int)0x80000000));
    PyDict_SetItemString(d,"CKC_X_509", SWIG_From_int((int)0x00000000));
    PyDict_SetItemString(d,"CKC_X_509_ATTR_CERT", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKC_VENDOR_DEFINED", SWIG_From_int((int)0x80000000));
    PyDict_SetItemString(d,"CKA_CLASS", SWIG_From_int((int)0x00000000));
    PyDict_SetItemString(d,"CKA_TOKEN", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKA_PRIVATE", SWIG_From_int((int)0x00000002));
    PyDict_SetItemString(d,"CKA_LABEL", SWIG_From_int((int)0x00000003));
    PyDict_SetItemString(d,"CKA_APPLICATION", SWIG_From_int((int)0x00000010));
    PyDict_SetItemString(d,"CKA_VALUE", SWIG_From_int((int)0x00000011));
    PyDict_SetItemString(d,"CKA_OBJECT_ID", SWIG_From_int((int)0x00000012));
    PyDict_SetItemString(d,"CKA_CERTIFICATE_TYPE", SWIG_From_int((int)0x00000080));
    PyDict_SetItemString(d,"CKA_ISSUER", SWIG_From_int((int)0x00000081));
    PyDict_SetItemString(d,"CKA_SERIAL_NUMBER", SWIG_From_int((int)0x00000082));
    PyDict_SetItemString(d,"CKA_AC_ISSUER", SWIG_From_int((int)0x00000083));
    PyDict_SetItemString(d,"CKA_OWNER", SWIG_From_int((int)0x00000084));
    PyDict_SetItemString(d,"CKA_ATTR_TYPES", SWIG_From_int((int)0x00000085));
    PyDict_SetItemString(d,"CKA_TRUSTED", SWIG_From_int((int)0x00000086));
    PyDict_SetItemString(d,"CKA_KEY_TYPE", SWIG_From_int((int)0x00000100));
    PyDict_SetItemString(d,"CKA_SUBJECT", SWIG_From_int((int)0x00000101));
    PyDict_SetItemString(d,"CKA_ID", SWIG_From_int((int)0x00000102));
    PyDict_SetItemString(d,"CKA_SENSITIVE", SWIG_From_int((int)0x00000103));
    PyDict_SetItemString(d,"CKA_ENCRYPT", SWIG_From_int((int)0x00000104));
    PyDict_SetItemString(d,"CKA_DECRYPT", SWIG_From_int((int)0x00000105));
    PyDict_SetItemString(d,"CKA_WRAP", SWIG_From_int((int)0x00000106));
    PyDict_SetItemString(d,"CKA_UNWRAP", SWIG_From_int((int)0x00000107));
    PyDict_SetItemString(d,"CKA_SIGN", SWIG_From_int((int)0x00000108));
    PyDict_SetItemString(d,"CKA_SIGN_RECOVER", SWIG_From_int((int)0x00000109));
    PyDict_SetItemString(d,"CKA_VERIFY", SWIG_From_int((int)0x0000010A));
    PyDict_SetItemString(d,"CKA_VERIFY_RECOVER", SWIG_From_int((int)0x0000010B));
    PyDict_SetItemString(d,"CKA_DERIVE", SWIG_From_int((int)0x0000010C));
    PyDict_SetItemString(d,"CKA_START_DATE", SWIG_From_int((int)0x00000110));
    PyDict_SetItemString(d,"CKA_END_DATE", SWIG_From_int((int)0x00000111));
    PyDict_SetItemString(d,"CKA_MODULUS", SWIG_From_int((int)0x00000120));
    PyDict_SetItemString(d,"CKA_MODULUS_BITS", SWIG_From_int((int)0x00000121));
    PyDict_SetItemString(d,"CKA_PUBLIC_EXPONENT", SWIG_From_int((int)0x00000122));
    PyDict_SetItemString(d,"CKA_PRIVATE_EXPONENT", SWIG_From_int((int)0x00000123));
    PyDict_SetItemString(d,"CKA_PRIME_1", SWIG_From_int((int)0x00000124));
    PyDict_SetItemString(d,"CKA_PRIME_2", SWIG_From_int((int)0x00000125));
    PyDict_SetItemString(d,"CKA_EXPONENT_1", SWIG_From_int((int)0x00000126));
    PyDict_SetItemString(d,"CKA_EXPONENT_2", SWIG_From_int((int)0x00000127));
    PyDict_SetItemString(d,"CKA_COEFFICIENT", SWIG_From_int((int)0x00000128));
    PyDict_SetItemString(d,"CKA_PRIME", SWIG_From_int((int)0x00000130));
    PyDict_SetItemString(d,"CKA_SUBPRIME", SWIG_From_int((int)0x00000131));
    PyDict_SetItemString(d,"CKA_BASE", SWIG_From_int((int)0x00000132));
    PyDict_SetItemString(d,"CKA_PRIME_BITS", SWIG_From_int((int)0x00000133));
    PyDict_SetItemString(d,"CKA_SUBPRIME_BITS", SWIG_From_int((int)0x00000134));
    PyDict_SetItemString(d,"CKA_SUB_PRIME_BITS", SWIG_From_int((int)0x00000134));
    PyDict_SetItemString(d,"CKA_VALUE_BITS", SWIG_From_int((int)0x00000160));
    PyDict_SetItemString(d,"CKA_VALUE_LEN", SWIG_From_int((int)0x00000161));
    PyDict_SetItemString(d,"CKA_EXTRACTABLE", SWIG_From_int((int)0x00000162));
    PyDict_SetItemString(d,"CKA_LOCAL", SWIG_From_int((int)0x00000163));
    PyDict_SetItemString(d,"CKA_NEVER_EXTRACTABLE", SWIG_From_int((int)0x00000164));
    PyDict_SetItemString(d,"CKA_ALWAYS_SENSITIVE", SWIG_From_int((int)0x00000165));
    PyDict_SetItemString(d,"CKA_KEY_GEN_MECHANISM", SWIG_From_int((int)0x00000166));
    PyDict_SetItemString(d,"CKA_MODIFIABLE", SWIG_From_int((int)0x00000170));
    PyDict_SetItemString(d,"CKA_ECDSA_PARAMS", SWIG_From_int((int)0x00000180));
    PyDict_SetItemString(d,"CKA_EC_PARAMS", SWIG_From_int((int)0x00000180));
    PyDict_SetItemString(d,"CKA_EC_POINT", SWIG_From_int((int)0x00000181));
    PyDict_SetItemString(d,"CKA_SECONDARY_AUTH", SWIG_From_int((int)0x00000200));
    PyDict_SetItemString(d,"CKA_AUTH_PIN_FLAGS", SWIG_From_int((int)0x00000201));
    PyDict_SetItemString(d,"CKA_HW_FEATURE_TYPE", SWIG_From_int((int)0x00000300));
    PyDict_SetItemString(d,"CKA_RESET_ON_INIT", SWIG_From_int((int)0x00000301));
    PyDict_SetItemString(d,"CKA_HAS_RESET", SWIG_From_int((int)0x00000302));
    PyDict_SetItemString(d,"CKA_VENDOR_DEFINED", SWIG_From_int((int)0x80000000));
    PyDict_SetItemString(d,"CKM_RSA_PKCS_KEY_PAIR_GEN", SWIG_From_int((int)0x00000000));
    PyDict_SetItemString(d,"CKM_RSA_PKCS", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKM_RSA_9796", SWIG_From_int((int)0x00000002));
    PyDict_SetItemString(d,"CKM_RSA_X_509", SWIG_From_int((int)0x00000003));
    PyDict_SetItemString(d,"CKM_MD2_RSA_PKCS", SWIG_From_int((int)0x00000004));
    PyDict_SetItemString(d,"CKM_MD5_RSA_PKCS", SWIG_From_int((int)0x00000005));
    PyDict_SetItemString(d,"CKM_SHA1_RSA_PKCS", SWIG_From_int((int)0x00000006));
    PyDict_SetItemString(d,"CKM_RIPEMD128_RSA_PKCS", SWIG_From_int((int)0x00000007));
    PyDict_SetItemString(d,"CKM_RIPEMD160_RSA_PKCS", SWIG_From_int((int)0x00000008));
    PyDict_SetItemString(d,"CKM_RSA_PKCS_OAEP", SWIG_From_int((int)0x00000009));
    PyDict_SetItemString(d,"CKM_RSA_X9_31_KEY_PAIR_GEN", SWIG_From_int((int)0x0000000A));
    PyDict_SetItemString(d,"CKM_RSA_X9_31", SWIG_From_int((int)0x0000000B));
    PyDict_SetItemString(d,"CKM_SHA1_RSA_X9_31", SWIG_From_int((int)0x0000000C));
    PyDict_SetItemString(d,"CKM_RSA_PKCS_PSS", SWIG_From_int((int)0x0000000D));
    PyDict_SetItemString(d,"CKM_SHA1_RSA_PKCS_PSS", SWIG_From_int((int)0x0000000E));
    PyDict_SetItemString(d,"CKM_DSA_KEY_PAIR_GEN", SWIG_From_int((int)0x00000010));
    PyDict_SetItemString(d,"CKM_DSA", SWIG_From_int((int)0x00000011));
    PyDict_SetItemString(d,"CKM_DSA_SHA1", SWIG_From_int((int)0x00000012));
    PyDict_SetItemString(d,"CKM_DH_PKCS_KEY_PAIR_GEN", SWIG_From_int((int)0x00000020));
    PyDict_SetItemString(d,"CKM_DH_PKCS_DERIVE", SWIG_From_int((int)0x00000021));
    PyDict_SetItemString(d,"CKM_X9_42_DH_KEY_PAIR_GEN", SWIG_From_int((int)0x00000030));
    PyDict_SetItemString(d,"CKM_X9_42_DH_DERIVE", SWIG_From_int((int)0x00000031));
    PyDict_SetItemString(d,"CKM_X9_42_DH_HYBRID_DERIVE", SWIG_From_int((int)0x00000032));
    PyDict_SetItemString(d,"CKM_X9_42_MQV_DERIVE", SWIG_From_int((int)0x00000033));
    PyDict_SetItemString(d,"CKM_RC2_KEY_GEN", SWIG_From_int((int)0x00000100));
    PyDict_SetItemString(d,"CKM_RC2_ECB", SWIG_From_int((int)0x00000101));
    PyDict_SetItemString(d,"CKM_RC2_CBC", SWIG_From_int((int)0x00000102));
    PyDict_SetItemString(d,"CKM_RC2_MAC", SWIG_From_int((int)0x00000103));
    PyDict_SetItemString(d,"CKM_RC2_MAC_GENERAL", SWIG_From_int((int)0x00000104));
    PyDict_SetItemString(d,"CKM_RC2_CBC_PAD", SWIG_From_int((int)0x00000105));
    PyDict_SetItemString(d,"CKM_RC4_KEY_GEN", SWIG_From_int((int)0x00000110));
    PyDict_SetItemString(d,"CKM_RC4", SWIG_From_int((int)0x00000111));
    PyDict_SetItemString(d,"CKM_DES_KEY_GEN", SWIG_From_int((int)0x00000120));
    PyDict_SetItemString(d,"CKM_DES_ECB", SWIG_From_int((int)0x00000121));
    PyDict_SetItemString(d,"CKM_DES_CBC", SWIG_From_int((int)0x00000122));
    PyDict_SetItemString(d,"CKM_DES_MAC", SWIG_From_int((int)0x00000123));
    PyDict_SetItemString(d,"CKM_DES_MAC_GENERAL", SWIG_From_int((int)0x00000124));
    PyDict_SetItemString(d,"CKM_DES_CBC_PAD", SWIG_From_int((int)0x00000125));
    PyDict_SetItemString(d,"CKM_DES2_KEY_GEN", SWIG_From_int((int)0x00000130));
    PyDict_SetItemString(d,"CKM_DES3_KEY_GEN", SWIG_From_int((int)0x00000131));
    PyDict_SetItemString(d,"CKM_DES3_ECB", SWIG_From_int((int)0x00000132));
    PyDict_SetItemString(d,"CKM_DES3_CBC", SWIG_From_int((int)0x00000133));
    PyDict_SetItemString(d,"CKM_DES3_MAC", SWIG_From_int((int)0x00000134));
    PyDict_SetItemString(d,"CKM_DES3_MAC_GENERAL", SWIG_From_int((int)0x00000135));
    PyDict_SetItemString(d,"CKM_DES3_CBC_PAD", SWIG_From_int((int)0x00000136));
    PyDict_SetItemString(d,"CKM_CDMF_KEY_GEN", SWIG_From_int((int)0x00000140));
    PyDict_SetItemString(d,"CKM_CDMF_ECB", SWIG_From_int((int)0x00000141));
    PyDict_SetItemString(d,"CKM_CDMF_CBC", SWIG_From_int((int)0x00000142));
    PyDict_SetItemString(d,"CKM_CDMF_MAC", SWIG_From_int((int)0x00000143));
    PyDict_SetItemString(d,"CKM_CDMF_MAC_GENERAL", SWIG_From_int((int)0x00000144));
    PyDict_SetItemString(d,"CKM_CDMF_CBC_PAD", SWIG_From_int((int)0x00000145));
    PyDict_SetItemString(d,"CKM_MD2", SWIG_From_int((int)0x00000200));
    PyDict_SetItemString(d,"CKM_MD2_HMAC", SWIG_From_int((int)0x00000201));
    PyDict_SetItemString(d,"CKM_MD2_HMAC_GENERAL", SWIG_From_int((int)0x00000202));
    PyDict_SetItemString(d,"CKM_MD5", SWIG_From_int((int)0x00000210));
    PyDict_SetItemString(d,"CKM_MD5_HMAC", SWIG_From_int((int)0x00000211));
    PyDict_SetItemString(d,"CKM_MD5_HMAC_GENERAL", SWIG_From_int((int)0x00000212));
    PyDict_SetItemString(d,"CKM_SHA_1", SWIG_From_int((int)0x00000220));
    PyDict_SetItemString(d,"CKM_SHA_1_HMAC", SWIG_From_int((int)0x00000221));
    PyDict_SetItemString(d,"CKM_SHA_1_HMAC_GENERAL", SWIG_From_int((int)0x00000222));
    PyDict_SetItemString(d,"CKM_RIPEMD128", SWIG_From_int((int)0x00000230));
    PyDict_SetItemString(d,"CKM_RIPEMD128_HMAC", SWIG_From_int((int)0x00000231));
    PyDict_SetItemString(d,"CKM_RIPEMD128_HMAC_GENERAL", SWIG_From_int((int)0x00000232));
    PyDict_SetItemString(d,"CKM_RIPEMD160", SWIG_From_int((int)0x00000240));
    PyDict_SetItemString(d,"CKM_RIPEMD160_HMAC", SWIG_From_int((int)0x00000241));
    PyDict_SetItemString(d,"CKM_RIPEMD160_HMAC_GENERAL", SWIG_From_int((int)0x00000242));
    PyDict_SetItemString(d,"CKM_CAST_KEY_GEN", SWIG_From_int((int)0x00000300));
    PyDict_SetItemString(d,"CKM_CAST_ECB", SWIG_From_int((int)0x00000301));
    PyDict_SetItemString(d,"CKM_CAST_CBC", SWIG_From_int((int)0x00000302));
    PyDict_SetItemString(d,"CKM_CAST_MAC", SWIG_From_int((int)0x00000303));
    PyDict_SetItemString(d,"CKM_CAST_MAC_GENERAL", SWIG_From_int((int)0x00000304));
    PyDict_SetItemString(d,"CKM_CAST_CBC_PAD", SWIG_From_int((int)0x00000305));
    PyDict_SetItemString(d,"CKM_CAST3_KEY_GEN", SWIG_From_int((int)0x00000310));
    PyDict_SetItemString(d,"CKM_CAST3_ECB", SWIG_From_int((int)0x00000311));
    PyDict_SetItemString(d,"CKM_CAST3_CBC", SWIG_From_int((int)0x00000312));
    PyDict_SetItemString(d,"CKM_CAST3_MAC", SWIG_From_int((int)0x00000313));
    PyDict_SetItemString(d,"CKM_CAST3_MAC_GENERAL", SWIG_From_int((int)0x00000314));
    PyDict_SetItemString(d,"CKM_CAST3_CBC_PAD", SWIG_From_int((int)0x00000315));
    PyDict_SetItemString(d,"CKM_CAST5_KEY_GEN", SWIG_From_int((int)0x00000320));
    PyDict_SetItemString(d,"CKM_CAST128_KEY_GEN", SWIG_From_int((int)0x00000320));
    PyDict_SetItemString(d,"CKM_CAST5_ECB", SWIG_From_int((int)0x00000321));
    PyDict_SetItemString(d,"CKM_CAST128_ECB", SWIG_From_int((int)0x00000321));
    PyDict_SetItemString(d,"CKM_CAST5_CBC", SWIG_From_int((int)0x00000322));
    PyDict_SetItemString(d,"CKM_CAST128_CBC", SWIG_From_int((int)0x00000322));
    PyDict_SetItemString(d,"CKM_CAST5_MAC", SWIG_From_int((int)0x00000323));
    PyDict_SetItemString(d,"CKM_CAST128_MAC", SWIG_From_int((int)0x00000323));
    PyDict_SetItemString(d,"CKM_CAST5_MAC_GENERAL", SWIG_From_int((int)0x00000324));
    PyDict_SetItemString(d,"CKM_CAST128_MAC_GENERAL", SWIG_From_int((int)0x00000324));
    PyDict_SetItemString(d,"CKM_CAST5_CBC_PAD", SWIG_From_int((int)0x00000325));
    PyDict_SetItemString(d,"CKM_CAST128_CBC_PAD", SWIG_From_int((int)0x00000325));
    PyDict_SetItemString(d,"CKM_RC5_KEY_GEN", SWIG_From_int((int)0x00000330));
    PyDict_SetItemString(d,"CKM_RC5_ECB", SWIG_From_int((int)0x00000331));
    PyDict_SetItemString(d,"CKM_RC5_CBC", SWIG_From_int((int)0x00000332));
    PyDict_SetItemString(d,"CKM_RC5_MAC", SWIG_From_int((int)0x00000333));
    PyDict_SetItemString(d,"CKM_RC5_MAC_GENERAL", SWIG_From_int((int)0x00000334));
    PyDict_SetItemString(d,"CKM_RC5_CBC_PAD", SWIG_From_int((int)0x00000335));
    PyDict_SetItemString(d,"CKM_IDEA_KEY_GEN", SWIG_From_int((int)0x00000340));
    PyDict_SetItemString(d,"CKM_IDEA_ECB", SWIG_From_int((int)0x00000341));
    PyDict_SetItemString(d,"CKM_IDEA_CBC", SWIG_From_int((int)0x00000342));
    PyDict_SetItemString(d,"CKM_IDEA_MAC", SWIG_From_int((int)0x00000343));
    PyDict_SetItemString(d,"CKM_IDEA_MAC_GENERAL", SWIG_From_int((int)0x00000344));
    PyDict_SetItemString(d,"CKM_IDEA_CBC_PAD", SWIG_From_int((int)0x00000345));
    PyDict_SetItemString(d,"CKM_GENERIC_SECRET_KEY_GEN", SWIG_From_int((int)0x00000350));
    PyDict_SetItemString(d,"CKM_CONCATENATE_BASE_AND_KEY", SWIG_From_int((int)0x00000360));
    PyDict_SetItemString(d,"CKM_CONCATENATE_BASE_AND_DATA", SWIG_From_int((int)0x00000362));
    PyDict_SetItemString(d,"CKM_CONCATENATE_DATA_AND_BASE", SWIG_From_int((int)0x00000363));
    PyDict_SetItemString(d,"CKM_XOR_BASE_AND_DATA", SWIG_From_int((int)0x00000364));
    PyDict_SetItemString(d,"CKM_EXTRACT_KEY_FROM_KEY", SWIG_From_int((int)0x00000365));
    PyDict_SetItemString(d,"CKM_SSL3_PRE_MASTER_KEY_GEN", SWIG_From_int((int)0x00000370));
    PyDict_SetItemString(d,"CKM_SSL3_MASTER_KEY_DERIVE", SWIG_From_int((int)0x00000371));
    PyDict_SetItemString(d,"CKM_SSL3_KEY_AND_MAC_DERIVE", SWIG_From_int((int)0x00000372));
    PyDict_SetItemString(d,"CKM_SSL3_MASTER_KEY_DERIVE_DH", SWIG_From_int((int)0x00000373));
    PyDict_SetItemString(d,"CKM_TLS_PRE_MASTER_KEY_GEN", SWIG_From_int((int)0x00000374));
    PyDict_SetItemString(d,"CKM_TLS_MASTER_KEY_DERIVE", SWIG_From_int((int)0x00000375));
    PyDict_SetItemString(d,"CKM_TLS_KEY_AND_MAC_DERIVE", SWIG_From_int((int)0x00000376));
    PyDict_SetItemString(d,"CKM_TLS_MASTER_KEY_DERIVE_DH", SWIG_From_int((int)0x00000377));
    PyDict_SetItemString(d,"CKM_SSL3_MD5_MAC", SWIG_From_int((int)0x00000380));
    PyDict_SetItemString(d,"CKM_SSL3_SHA1_MAC", SWIG_From_int((int)0x00000381));
    PyDict_SetItemString(d,"CKM_MD5_KEY_DERIVATION", SWIG_From_int((int)0x00000390));
    PyDict_SetItemString(d,"CKM_MD2_KEY_DERIVATION", SWIG_From_int((int)0x00000391));
    PyDict_SetItemString(d,"CKM_SHA1_KEY_DERIVATION", SWIG_From_int((int)0x00000392));
    PyDict_SetItemString(d,"CKM_PBE_MD2_DES_CBC", SWIG_From_int((int)0x000003A0));
    PyDict_SetItemString(d,"CKM_PBE_MD5_DES_CBC", SWIG_From_int((int)0x000003A1));
    PyDict_SetItemString(d,"CKM_PBE_MD5_CAST_CBC", SWIG_From_int((int)0x000003A2));
    PyDict_SetItemString(d,"CKM_PBE_MD5_CAST3_CBC", SWIG_From_int((int)0x000003A3));
    PyDict_SetItemString(d,"CKM_PBE_MD5_CAST5_CBC", SWIG_From_int((int)0x000003A4));
    PyDict_SetItemString(d,"CKM_PBE_MD5_CAST128_CBC", SWIG_From_int((int)0x000003A4));
    PyDict_SetItemString(d,"CKM_PBE_SHA1_CAST5_CBC", SWIG_From_int((int)0x000003A5));
    PyDict_SetItemString(d,"CKM_PBE_SHA1_CAST128_CBC", SWIG_From_int((int)0x000003A5));
    PyDict_SetItemString(d,"CKM_PBE_SHA1_RC4_128", SWIG_From_int((int)0x000003A6));
    PyDict_SetItemString(d,"CKM_PBE_SHA1_RC4_40", SWIG_From_int((int)0x000003A7));
    PyDict_SetItemString(d,"CKM_PBE_SHA1_DES3_EDE_CBC", SWIG_From_int((int)0x000003A8));
    PyDict_SetItemString(d,"CKM_PBE_SHA1_DES2_EDE_CBC", SWIG_From_int((int)0x000003A9));
    PyDict_SetItemString(d,"CKM_PBE_SHA1_RC2_128_CBC", SWIG_From_int((int)0x000003AA));
    PyDict_SetItemString(d,"CKM_PBE_SHA1_RC2_40_CBC", SWIG_From_int((int)0x000003AB));
    PyDict_SetItemString(d,"CKM_PKCS5_PBKD2", SWIG_From_int((int)0x000003B0));
    PyDict_SetItemString(d,"CKM_PBA_SHA1_WITH_SHA1_HMAC", SWIG_From_int((int)0x000003C0));
    PyDict_SetItemString(d,"CKM_KEY_WRAP_LYNKS", SWIG_From_int((int)0x00000400));
    PyDict_SetItemString(d,"CKM_KEY_WRAP_SET_OAEP", SWIG_From_int((int)0x00000401));
    PyDict_SetItemString(d,"CKM_SKIPJACK_KEY_GEN", SWIG_From_int((int)0x00001000));
    PyDict_SetItemString(d,"CKM_SKIPJACK_ECB64", SWIG_From_int((int)0x00001001));
    PyDict_SetItemString(d,"CKM_SKIPJACK_CBC64", SWIG_From_int((int)0x00001002));
    PyDict_SetItemString(d,"CKM_SKIPJACK_OFB64", SWIG_From_int((int)0x00001003));
    PyDict_SetItemString(d,"CKM_SKIPJACK_CFB64", SWIG_From_int((int)0x00001004));
    PyDict_SetItemString(d,"CKM_SKIPJACK_CFB32", SWIG_From_int((int)0x00001005));
    PyDict_SetItemString(d,"CKM_SKIPJACK_CFB16", SWIG_From_int((int)0x00001006));
    PyDict_SetItemString(d,"CKM_SKIPJACK_CFB8", SWIG_From_int((int)0x00001007));
    PyDict_SetItemString(d,"CKM_SKIPJACK_WRAP", SWIG_From_int((int)0x00001008));
    PyDict_SetItemString(d,"CKM_SKIPJACK_PRIVATE_WRAP", SWIG_From_int((int)0x00001009));
    PyDict_SetItemString(d,"CKM_SKIPJACK_RELAYX", SWIG_From_int((int)0x0000100a));
    PyDict_SetItemString(d,"CKM_KEA_KEY_PAIR_GEN", SWIG_From_int((int)0x00001010));
    PyDict_SetItemString(d,"CKM_KEA_KEY_DERIVE", SWIG_From_int((int)0x00001011));
    PyDict_SetItemString(d,"CKM_FORTEZZA_TIMESTAMP", SWIG_From_int((int)0x00001020));
    PyDict_SetItemString(d,"CKM_BATON_KEY_GEN", SWIG_From_int((int)0x00001030));
    PyDict_SetItemString(d,"CKM_BATON_ECB128", SWIG_From_int((int)0x00001031));
    PyDict_SetItemString(d,"CKM_BATON_ECB96", SWIG_From_int((int)0x00001032));
    PyDict_SetItemString(d,"CKM_BATON_CBC128", SWIG_From_int((int)0x00001033));
    PyDict_SetItemString(d,"CKM_BATON_COUNTER", SWIG_From_int((int)0x00001034));
    PyDict_SetItemString(d,"CKM_BATON_SHUFFLE", SWIG_From_int((int)0x00001035));
    PyDict_SetItemString(d,"CKM_BATON_WRAP", SWIG_From_int((int)0x00001036));
    PyDict_SetItemString(d,"CKM_ECDSA_KEY_PAIR_GEN", SWIG_From_int((int)0x00001040));
    PyDict_SetItemString(d,"CKM_EC_KEY_PAIR_GEN", SWIG_From_int((int)0x00001040));
    PyDict_SetItemString(d,"CKM_ECDSA", SWIG_From_int((int)0x00001041));
    PyDict_SetItemString(d,"CKM_ECDSA_SHA1", SWIG_From_int((int)0x00001042));
    PyDict_SetItemString(d,"CKM_ECDH1_DERIVE", SWIG_From_int((int)0x00001050));
    PyDict_SetItemString(d,"CKM_ECDH1_COFACTOR_DERIVE", SWIG_From_int((int)0x00001051));
    PyDict_SetItemString(d,"CKM_ECMQV_DERIVE", SWIG_From_int((int)0x00001052));
    PyDict_SetItemString(d,"CKM_JUNIPER_KEY_GEN", SWIG_From_int((int)0x00001060));
    PyDict_SetItemString(d,"CKM_JUNIPER_ECB128", SWIG_From_int((int)0x00001061));
    PyDict_SetItemString(d,"CKM_JUNIPER_CBC128", SWIG_From_int((int)0x00001062));
    PyDict_SetItemString(d,"CKM_JUNIPER_COUNTER", SWIG_From_int((int)0x00001063));
    PyDict_SetItemString(d,"CKM_JUNIPER_SHUFFLE", SWIG_From_int((int)0x00001064));
    PyDict_SetItemString(d,"CKM_JUNIPER_WRAP", SWIG_From_int((int)0x00001065));
    PyDict_SetItemString(d,"CKM_FASTHASH", SWIG_From_int((int)0x00001070));
    PyDict_SetItemString(d,"CKM_AES_KEY_GEN", SWIG_From_int((int)0x00001080));
    PyDict_SetItemString(d,"CKM_AES_ECB", SWIG_From_int((int)0x00001081));
    PyDict_SetItemString(d,"CKM_AES_CBC", SWIG_From_int((int)0x00001082));
    PyDict_SetItemString(d,"CKM_AES_MAC", SWIG_From_int((int)0x00001083));
    PyDict_SetItemString(d,"CKM_AES_MAC_GENERAL", SWIG_From_int((int)0x00001084));
    PyDict_SetItemString(d,"CKM_AES_CBC_PAD", SWIG_From_int((int)0x00001085));
    PyDict_SetItemString(d,"CKM_DSA_PARAMETER_GEN", SWIG_From_int((int)0x00002000));
    PyDict_SetItemString(d,"CKM_DH_PKCS_PARAMETER_GEN", SWIG_From_int((int)0x00002001));
    PyDict_SetItemString(d,"CKM_X9_42_DH_PARAMETER_GEN", SWIG_From_int((int)0x00002002));
    PyDict_SetItemString(d,"CKM_VENDOR_DEFINED", SWIG_From_int((int)0x80000000));
    PyDict_SetItemString(d,"CKF_HW", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKF_ENCRYPT", SWIG_From_int((int)0x00000100));
    PyDict_SetItemString(d,"CKF_DECRYPT", SWIG_From_int((int)0x00000200));
    PyDict_SetItemString(d,"CKF_DIGEST", SWIG_From_int((int)0x00000400));
    PyDict_SetItemString(d,"CKF_SIGN", SWIG_From_int((int)0x00000800));
    PyDict_SetItemString(d,"CKF_SIGN_RECOVER", SWIG_From_int((int)0x00001000));
    PyDict_SetItemString(d,"CKF_VERIFY", SWIG_From_int((int)0x00002000));
    PyDict_SetItemString(d,"CKF_VERIFY_RECOVER", SWIG_From_int((int)0x00004000));
    PyDict_SetItemString(d,"CKF_GENERATE", SWIG_From_int((int)0x00008000));
    PyDict_SetItemString(d,"CKF_GENERATE_KEY_PAIR", SWIG_From_int((int)0x00010000));
    PyDict_SetItemString(d,"CKF_WRAP", SWIG_From_int((int)0x00020000));
    PyDict_SetItemString(d,"CKF_UNWRAP", SWIG_From_int((int)0x00040000));
    PyDict_SetItemString(d,"CKF_DERIVE", SWIG_From_int((int)0x00080000));
    PyDict_SetItemString(d,"CKF_EC_F_P", SWIG_From_int((int)0x00100000));
    PyDict_SetItemString(d,"CKF_EC_F_2M", SWIG_From_int((int)0x00200000));
    PyDict_SetItemString(d,"CKF_EC_ECPARAMETERS", SWIG_From_int((int)0x00400000));
    PyDict_SetItemString(d,"CKF_EC_NAMEDCURVE", SWIG_From_int((int)0x00800000));
    PyDict_SetItemString(d,"CKF_EC_UNCOMPRESS", SWIG_From_int((int)0x01000000));
    PyDict_SetItemString(d,"CKF_EC_COMPRESS", SWIG_From_int((int)0x02000000));
    PyDict_SetItemString(d,"CKF_EXTENSION", SWIG_From_int((int)0x80000000));
    PyDict_SetItemString(d,"CKR_OK", SWIG_From_int((int)0x00000000));
    PyDict_SetItemString(d,"CKR_CANCEL", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKR_HOST_MEMORY", SWIG_From_int((int)0x00000002));
    PyDict_SetItemString(d,"CKR_SLOT_ID_INVALID", SWIG_From_int((int)0x00000003));
    PyDict_SetItemString(d,"CKR_GENERAL_ERROR", SWIG_From_int((int)0x00000005));
    PyDict_SetItemString(d,"CKR_FUNCTION_FAILED", SWIG_From_int((int)0x00000006));
    PyDict_SetItemString(d,"CKR_ARGUMENTS_BAD", SWIG_From_int((int)0x00000007));
    PyDict_SetItemString(d,"CKR_NO_EVENT", SWIG_From_int((int)0x00000008));
    PyDict_SetItemString(d,"CKR_NEED_TO_CREATE_THREADS", SWIG_From_int((int)0x00000009));
    PyDict_SetItemString(d,"CKR_CANT_LOCK", SWIG_From_int((int)0x0000000A));
    PyDict_SetItemString(d,"CKR_ATTRIBUTE_READ_ONLY", SWIG_From_int((int)0x00000010));
    PyDict_SetItemString(d,"CKR_ATTRIBUTE_SENSITIVE", SWIG_From_int((int)0x00000011));
    PyDict_SetItemString(d,"CKR_ATTRIBUTE_TYPE_INVALID", SWIG_From_int((int)0x00000012));
    PyDict_SetItemString(d,"CKR_ATTRIBUTE_VALUE_INVALID", SWIG_From_int((int)0x00000013));
    PyDict_SetItemString(d,"CKR_DATA_INVALID", SWIG_From_int((int)0x00000020));
    PyDict_SetItemString(d,"CKR_DATA_LEN_RANGE", SWIG_From_int((int)0x00000021));
    PyDict_SetItemString(d,"CKR_DEVICE_ERROR", SWIG_From_int((int)0x00000030));
    PyDict_SetItemString(d,"CKR_DEVICE_MEMORY", SWIG_From_int((int)0x00000031));
    PyDict_SetItemString(d,"CKR_DEVICE_REMOVED", SWIG_From_int((int)0x00000032));
    PyDict_SetItemString(d,"CKR_ENCRYPTED_DATA_INVALID", SWIG_From_int((int)0x00000040));
    PyDict_SetItemString(d,"CKR_ENCRYPTED_DATA_LEN_RANGE", SWIG_From_int((int)0x00000041));
    PyDict_SetItemString(d,"CKR_FUNCTION_CANCELED", SWIG_From_int((int)0x00000050));
    PyDict_SetItemString(d,"CKR_FUNCTION_NOT_PARALLEL", SWIG_From_int((int)0x00000051));
    PyDict_SetItemString(d,"CKR_FUNCTION_NOT_SUPPORTED", SWIG_From_int((int)0x00000054));
    PyDict_SetItemString(d,"CKR_KEY_HANDLE_INVALID", SWIG_From_int((int)0x00000060));
    PyDict_SetItemString(d,"CKR_KEY_SIZE_RANGE", SWIG_From_int((int)0x00000062));
    PyDict_SetItemString(d,"CKR_KEY_TYPE_INCONSISTENT", SWIG_From_int((int)0x00000063));
    PyDict_SetItemString(d,"CKR_KEY_NOT_NEEDED", SWIG_From_int((int)0x00000064));
    PyDict_SetItemString(d,"CKR_KEY_CHANGED", SWIG_From_int((int)0x00000065));
    PyDict_SetItemString(d,"CKR_KEY_NEEDED", SWIG_From_int((int)0x00000066));
    PyDict_SetItemString(d,"CKR_KEY_INDIGESTIBLE", SWIG_From_int((int)0x00000067));
    PyDict_SetItemString(d,"CKR_KEY_FUNCTION_NOT_PERMITTED", SWIG_From_int((int)0x00000068));
    PyDict_SetItemString(d,"CKR_KEY_NOT_WRAPPABLE", SWIG_From_int((int)0x00000069));
    PyDict_SetItemString(d,"CKR_KEY_UNEXTRACTABLE", SWIG_From_int((int)0x0000006A));
    PyDict_SetItemString(d,"CKR_MECHANISM_INVALID", SWIG_From_int((int)0x00000070));
    PyDict_SetItemString(d,"CKR_MECHANISM_PARAM_INVALID", SWIG_From_int((int)0x00000071));
    PyDict_SetItemString(d,"CKR_OBJECT_HANDLE_INVALID", SWIG_From_int((int)0x00000082));
    PyDict_SetItemString(d,"CKR_OPERATION_ACTIVE", SWIG_From_int((int)0x00000090));
    PyDict_SetItemString(d,"CKR_OPERATION_NOT_INITIALIZED", SWIG_From_int((int)0x00000091));
    PyDict_SetItemString(d,"CKR_PIN_INCORRECT", SWIG_From_int((int)0x000000A0));
    PyDict_SetItemString(d,"CKR_PIN_INVALID", SWIG_From_int((int)0x000000A1));
    PyDict_SetItemString(d,"CKR_PIN_LEN_RANGE", SWIG_From_int((int)0x000000A2));
    PyDict_SetItemString(d,"CKR_PIN_EXPIRED", SWIG_From_int((int)0x000000A3));
    PyDict_SetItemString(d,"CKR_PIN_LOCKED", SWIG_From_int((int)0x000000A4));
    PyDict_SetItemString(d,"CKR_SESSION_CLOSED", SWIG_From_int((int)0x000000B0));
    PyDict_SetItemString(d,"CKR_SESSION_COUNT", SWIG_From_int((int)0x000000B1));
    PyDict_SetItemString(d,"CKR_SESSION_HANDLE_INVALID", SWIG_From_int((int)0x000000B3));
    PyDict_SetItemString(d,"CKR_SESSION_PARALLEL_NOT_SUPPORTED", SWIG_From_int((int)0x000000B4));
    PyDict_SetItemString(d,"CKR_SESSION_READ_ONLY", SWIG_From_int((int)0x000000B5));
    PyDict_SetItemString(d,"CKR_SESSION_EXISTS", SWIG_From_int((int)0x000000B6));
    PyDict_SetItemString(d,"CKR_SESSION_READ_ONLY_EXISTS", SWIG_From_int((int)0x000000B7));
    PyDict_SetItemString(d,"CKR_SESSION_READ_WRITE_SO_EXISTS", SWIG_From_int((int)0x000000B8));
    PyDict_SetItemString(d,"CKR_SIGNATURE_INVALID", SWIG_From_int((int)0x000000C0));
    PyDict_SetItemString(d,"CKR_SIGNATURE_LEN_RANGE", SWIG_From_int((int)0x000000C1));
    PyDict_SetItemString(d,"CKR_TEMPLATE_INCOMPLETE", SWIG_From_int((int)0x000000D0));
    PyDict_SetItemString(d,"CKR_TEMPLATE_INCONSISTENT", SWIG_From_int((int)0x000000D1));
    PyDict_SetItemString(d,"CKR_TOKEN_NOT_PRESENT", SWIG_From_int((int)0x000000E0));
    PyDict_SetItemString(d,"CKR_TOKEN_NOT_RECOGNIZED", SWIG_From_int((int)0x000000E1));
    PyDict_SetItemString(d,"CKR_TOKEN_WRITE_PROTECTED", SWIG_From_int((int)0x000000E2));
    PyDict_SetItemString(d,"CKR_UNWRAPPING_KEY_HANDLE_INVALID", SWIG_From_int((int)0x000000F0));
    PyDict_SetItemString(d,"CKR_UNWRAPPING_KEY_SIZE_RANGE", SWIG_From_int((int)0x000000F1));
    PyDict_SetItemString(d,"CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT", SWIG_From_int((int)0x000000F2));
    PyDict_SetItemString(d,"CKR_USER_ALREADY_LOGGED_IN", SWIG_From_int((int)0x00000100));
    PyDict_SetItemString(d,"CKR_USER_NOT_LOGGED_IN", SWIG_From_int((int)0x00000101));
    PyDict_SetItemString(d,"CKR_USER_PIN_NOT_INITIALIZED", SWIG_From_int((int)0x00000102));
    PyDict_SetItemString(d,"CKR_USER_TYPE_INVALID", SWIG_From_int((int)0x00000103));
    PyDict_SetItemString(d,"CKR_USER_ANOTHER_ALREADY_LOGGED_IN", SWIG_From_int((int)0x00000104));
    PyDict_SetItemString(d,"CKR_USER_TOO_MANY_TYPES", SWIG_From_int((int)0x00000105));
    PyDict_SetItemString(d,"CKR_WRAPPED_KEY_INVALID", SWIG_From_int((int)0x00000110));
    PyDict_SetItemString(d,"CKR_WRAPPED_KEY_LEN_RANGE", SWIG_From_int((int)0x00000112));
    PyDict_SetItemString(d,"CKR_WRAPPING_KEY_HANDLE_INVALID", SWIG_From_int((int)0x00000113));
    PyDict_SetItemString(d,"CKR_WRAPPING_KEY_SIZE_RANGE", SWIG_From_int((int)0x00000114));
    PyDict_SetItemString(d,"CKR_WRAPPING_KEY_TYPE_INCONSISTENT", SWIG_From_int((int)0x00000115));
    PyDict_SetItemString(d,"CKR_RANDOM_SEED_NOT_SUPPORTED", SWIG_From_int((int)0x00000120));
    PyDict_SetItemString(d,"CKR_RANDOM_NO_RNG", SWIG_From_int((int)0x00000121));
    PyDict_SetItemString(d,"CKR_DOMAIN_PARAMS_INVALID", SWIG_From_int((int)0x00000130));
    PyDict_SetItemString(d,"CKR_BUFFER_TOO_SMALL", SWIG_From_int((int)0x00000150));
    PyDict_SetItemString(d,"CKR_SAVED_STATE_INVALID", SWIG_From_int((int)0x00000160));
    PyDict_SetItemString(d,"CKR_INFORMATION_SENSITIVE", SWIG_From_int((int)0x00000170));
    PyDict_SetItemString(d,"CKR_STATE_UNSAVEABLE", SWIG_From_int((int)0x00000180));
    PyDict_SetItemString(d,"CKR_CRYPTOKI_NOT_INITIALIZED", SWIG_From_int((int)0x00000190));
    PyDict_SetItemString(d,"CKR_CRYPTOKI_ALREADY_INITIALIZED", SWIG_From_int((int)0x00000191));
    PyDict_SetItemString(d,"CKR_MUTEX_BAD", SWIG_From_int((int)0x000001A0));
    PyDict_SetItemString(d,"CKR_MUTEX_NOT_LOCKED", SWIG_From_int((int)0x000001A1));
    PyDict_SetItemString(d,"CKR_VENDOR_DEFINED", SWIG_From_int((int)0x80000000));
    PyDict_SetItemString(d,"CKF_LIBRARY_CANT_CREATE_OS_THREADS", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKF_OS_LOCKING_OK", SWIG_From_int((int)0x00000002));
    PyDict_SetItemString(d,"CKF_DONT_BLOCK", SWIG_From_int((int)1));
    PyDict_SetItemString(d,"CKG_MGF1_SHA1", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKZ_DATA_SPECIFIED", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKD_NULL", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKD_SHA1_KDF", SWIG_From_int((int)0x00000002));
    PyDict_SetItemString(d,"CKD_SHA1_KDF_ASN1", SWIG_From_int((int)0x00000003));
    PyDict_SetItemString(d,"CKD_SHA1_KDF_CONCATENATE", SWIG_From_int((int)0x00000004));
    PyDict_SetItemString(d,"CKP_PKCS5_PBKD2_HMAC_SHA1", SWIG_From_int((int)0x00000001));
    PyDict_SetItemString(d,"CKZ_SALT_SPECIFIED", SWIG_From_int((int)0x00000001));
}

